"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@trpc+client@10.45.2_@trpc+server@10.45.2";
exports.ids = ["vendor-chunks/@trpc+client@10.45.2_@trpc+server@10.45.2"];
exports.modules = {

/***/ "(ssr)/../../node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/TRPCClientError-38f9a32a.mjs":
/*!**************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/TRPCClientError-38f9a32a.mjs ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   T: () => (/* binding */ TRPCClientError)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/shared */ \"(ssr)/../../node_modules/.pnpm/@trpc+server@10.45.2/node_modules/@trpc/server/dist/shared/index.mjs\");\n/* harmony import */ var _transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transformResult-ace864b8.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/transformResult-ace864b8.mjs\");\n\n\nfunction isTRPCClientError(cause) {\n    return cause instanceof TRPCClientError || /**\n     * @deprecated\n     * Delete in next major\n     */ cause instanceof Error && cause.name === \"TRPCClientError\";\n}\nfunction isTRPCErrorResponse(obj) {\n    return (0,_transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__.i)(obj) && (0,_transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__.i)(obj.error) && typeof obj.error.code === \"number\" && typeof obj.error.message === \"string\";\n}\nclass TRPCClientError extends Error {\n    static from(_cause, opts = {}) {\n        const cause = _cause;\n        if (isTRPCClientError(cause)) {\n            if (opts.meta) {\n                // Decorate with meta error data\n                cause.meta = {\n                    ...cause.meta,\n                    ...opts.meta\n                };\n            }\n            return cause;\n        }\n        if (isTRPCErrorResponse(cause)) {\n            return new TRPCClientError(cause.error.message, {\n                ...opts,\n                result: cause\n            });\n        }\n        if (!(cause instanceof Error)) {\n            return new TRPCClientError(\"Unknown error\", {\n                ...opts,\n                cause: cause\n            });\n        }\n        return new TRPCClientError(cause.message, {\n            ...opts,\n            cause: (0,_trpc_server_shared__WEBPACK_IMPORTED_MODULE_0__.getCauseFromUnknown)(cause)\n        });\n    }\n    constructor(message, opts){\n        const cause = opts?.cause;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore https://github.com/tc39/proposal-error-cause\n        super(message, {\n            cause\n        });\n        this.meta = opts?.meta;\n        this.cause = cause;\n        this.shape = opts?.result?.error;\n        this.data = opts?.result?.error.data;\n        this.name = \"TRPCClientError\";\n        Object.setPrototypeOf(this, TRPCClientError.prototype);\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0cnBjK2NsaWVudEAxMC40NS4yX0B0cnBjK3NlcnZlckAxMC40NS4yL25vZGVfbW9kdWxlcy9AdHJwYy9jbGllbnQvZGlzdC9UUlBDQ2xpZW50RXJyb3ItMzhmOWEzMmEubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUEwRDtBQUNLO0FBRS9ELFNBQVNHLGtCQUFrQkMsS0FBSztJQUM1QixPQUFPQSxpQkFBaUJDLG1CQUFtQjs7O0tBRzFDLEdBQUdELGlCQUFpQkUsU0FBU0YsTUFBTUcsSUFBSSxLQUFLO0FBQ2pEO0FBQ0EsU0FBU0Msb0JBQW9CQyxHQUFHO0lBQzVCLE9BQU9QLGdFQUFRQSxDQUFDTyxRQUFRUCxnRUFBUUEsQ0FBQ08sSUFBSUMsS0FBSyxLQUFLLE9BQU9ELElBQUlDLEtBQUssQ0FBQ0MsSUFBSSxLQUFLLFlBQVksT0FBT0YsSUFBSUMsS0FBSyxDQUFDRSxPQUFPLEtBQUs7QUFDdEg7QUFDQSxNQUFNUCx3QkFBd0JDO0lBQzFCLE9BQU9PLEtBQUtDLE1BQU0sRUFBRUMsT0FBTyxDQUFDLENBQUMsRUFBRTtRQUMzQixNQUFNWCxRQUFRVTtRQUNkLElBQUlYLGtCQUFrQkMsUUFBUTtZQUMxQixJQUFJVyxLQUFLQyxJQUFJLEVBQUU7Z0JBQ1gsZ0NBQWdDO2dCQUNoQ1osTUFBTVksSUFBSSxHQUFHO29CQUNULEdBQUdaLE1BQU1ZLElBQUk7b0JBQ2IsR0FBR0QsS0FBS0MsSUFBSTtnQkFDaEI7WUFDSjtZQUNBLE9BQU9aO1FBQ1g7UUFDQSxJQUFJSSxvQkFBb0JKLFFBQVE7WUFDNUIsT0FBTyxJQUFJQyxnQkFBZ0JELE1BQU1NLEtBQUssQ0FBQ0UsT0FBTyxFQUFFO2dCQUM1QyxHQUFHRyxJQUFJO2dCQUNQRSxRQUFRYjtZQUNaO1FBQ0o7UUFDQSxJQUFJLENBQUVBLENBQUFBLGlCQUFpQkUsS0FBSSxHQUFJO1lBQzNCLE9BQU8sSUFBSUQsZ0JBQWdCLGlCQUFpQjtnQkFDeEMsR0FBR1UsSUFBSTtnQkFDUFgsT0FBT0E7WUFDWDtRQUNKO1FBQ0EsT0FBTyxJQUFJQyxnQkFBZ0JELE1BQU1RLE9BQU8sRUFBRTtZQUN0QyxHQUFHRyxJQUFJO1lBQ1BYLE9BQU9KLHdFQUFtQkEsQ0FBQ0k7UUFDL0I7SUFDSjtJQUNBYyxZQUFZTixPQUFPLEVBQUVHLElBQUksQ0FBQztRQUN0QixNQUFNWCxRQUFRVyxNQUFNWDtRQUNwQiw2REFBNkQ7UUFDN0QsMERBQTBEO1FBQzFELEtBQUssQ0FBQ1EsU0FBUztZQUNYUjtRQUNKO1FBQ0EsSUFBSSxDQUFDWSxJQUFJLEdBQUdELE1BQU1DO1FBQ2xCLElBQUksQ0FBQ1osS0FBSyxHQUFHQTtRQUNiLElBQUksQ0FBQ2UsS0FBSyxHQUFHSixNQUFNRSxRQUFRUDtRQUMzQixJQUFJLENBQUNVLElBQUksR0FBR0wsTUFBTUUsUUFBUVAsTUFBTVU7UUFDaEMsSUFBSSxDQUFDYixJQUFJLEdBQUc7UUFDWmMsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRWpCLGdCQUFnQmtCLFNBQVM7SUFDekQ7QUFDSjtBQUVnQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BtaWRpdml6L3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHRycGMrY2xpZW50QDEwLjQ1LjJfQHRycGMrc2VydmVyQDEwLjQ1LjIvbm9kZV9tb2R1bGVzL0B0cnBjL2NsaWVudC9kaXN0L1RSUENDbGllbnRFcnJvci0zOGY5YTMyYS5tanM/Y2YxMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRDYXVzZUZyb21Vbmtub3duIH0gZnJvbSAnQHRycGMvc2VydmVyL3NoYXJlZCc7XG5pbXBvcnQgeyBpIGFzIGlzT2JqZWN0IH0gZnJvbSAnLi90cmFuc2Zvcm1SZXN1bHQtYWNlODY0YjgubWpzJztcblxuZnVuY3Rpb24gaXNUUlBDQ2xpZW50RXJyb3IoY2F1c2UpIHtcbiAgICByZXR1cm4gY2F1c2UgaW5zdGFuY2VvZiBUUlBDQ2xpZW50RXJyb3IgfHwgLyoqXG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKiBEZWxldGUgaW4gbmV4dCBtYWpvclxuICAgICAqLyBjYXVzZSBpbnN0YW5jZW9mIEVycm9yICYmIGNhdXNlLm5hbWUgPT09ICdUUlBDQ2xpZW50RXJyb3InO1xufVxuZnVuY3Rpb24gaXNUUlBDRXJyb3JSZXNwb25zZShvYmopIHtcbiAgICByZXR1cm4gaXNPYmplY3Qob2JqKSAmJiBpc09iamVjdChvYmouZXJyb3IpICYmIHR5cGVvZiBvYmouZXJyb3IuY29kZSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIG9iai5lcnJvci5tZXNzYWdlID09PSAnc3RyaW5nJztcbn1cbmNsYXNzIFRSUENDbGllbnRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBzdGF0aWMgZnJvbShfY2F1c2UsIG9wdHMgPSB7fSkge1xuICAgICAgICBjb25zdCBjYXVzZSA9IF9jYXVzZTtcbiAgICAgICAgaWYgKGlzVFJQQ0NsaWVudEVycm9yKGNhdXNlKSkge1xuICAgICAgICAgICAgaWYgKG9wdHMubWV0YSkge1xuICAgICAgICAgICAgICAgIC8vIERlY29yYXRlIHdpdGggbWV0YSBlcnJvciBkYXRhXG4gICAgICAgICAgICAgICAgY2F1c2UubWV0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgLi4uY2F1c2UubWV0YSxcbiAgICAgICAgICAgICAgICAgICAgLi4ub3B0cy5tZXRhXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjYXVzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNUUlBDRXJyb3JSZXNwb25zZShjYXVzZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVFJQQ0NsaWVudEVycm9yKGNhdXNlLmVycm9yLm1lc3NhZ2UsIHtcbiAgICAgICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICAgICAgICAgIHJlc3VsdDogY2F1c2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghKGNhdXNlIGluc3RhbmNlb2YgRXJyb3IpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFRSUENDbGllbnRFcnJvcignVW5rbm93biBlcnJvcicsIHtcbiAgICAgICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICAgICAgICAgIGNhdXNlOiBjYXVzZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBUUlBDQ2xpZW50RXJyb3IoY2F1c2UubWVzc2FnZSwge1xuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgICAgIGNhdXNlOiBnZXRDYXVzZUZyb21Vbmtub3duKGNhdXNlKVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgb3B0cyl7XG4gICAgICAgIGNvbnN0IGNhdXNlID0gb3B0cz8uY2F1c2U7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnRcbiAgICAgICAgLy8gQHRzLWlnbm9yZSBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1lcnJvci1jYXVzZVxuICAgICAgICBzdXBlcihtZXNzYWdlLCB7XG4gICAgICAgICAgICBjYXVzZVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5tZXRhID0gb3B0cz8ubWV0YTtcbiAgICAgICAgdGhpcy5jYXVzZSA9IGNhdXNlO1xuICAgICAgICB0aGlzLnNoYXBlID0gb3B0cz8ucmVzdWx0Py5lcnJvcjtcbiAgICAgICAgdGhpcy5kYXRhID0gb3B0cz8ucmVzdWx0Py5lcnJvci5kYXRhO1xuICAgICAgICB0aGlzLm5hbWUgPSAnVFJQQ0NsaWVudEVycm9yJztcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFRSUENDbGllbnRFcnJvci5wcm90b3R5cGUpO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgVFJQQ0NsaWVudEVycm9yIGFzIFQgfTtcbiJdLCJuYW1lcyI6WyJnZXRDYXVzZUZyb21Vbmtub3duIiwiaSIsImlzT2JqZWN0IiwiaXNUUlBDQ2xpZW50RXJyb3IiLCJjYXVzZSIsIlRSUENDbGllbnRFcnJvciIsIkVycm9yIiwibmFtZSIsImlzVFJQQ0Vycm9yUmVzcG9uc2UiLCJvYmoiLCJlcnJvciIsImNvZGUiLCJtZXNzYWdlIiwiZnJvbSIsIl9jYXVzZSIsIm9wdHMiLCJtZXRhIiwicmVzdWx0IiwiY29uc3RydWN0b3IiLCJzaGFwZSIsImRhdGEiLCJPYmplY3QiLCJzZXRQcm90b3R5cGVPZiIsInByb3RvdHlwZSIsIlQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/TRPCClientError-38f9a32a.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/httpBatchLink-d0f9eac9.mjs":
/*!************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/httpBatchLink-d0f9eac9.mjs ***!
  \************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ createHTTPBatchLink),\n/* harmony export */   h: () => (/* binding */ httpBatchLink)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/observable */ \"(ssr)/../../node_modules/.pnpm/@trpc+server@10.45.2/node_modules/@trpc/server/dist/observable/index.mjs\");\n/* harmony import */ var _transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transformResult-ace864b8.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/transformResult-ace864b8.mjs\");\n/* harmony import */ var _TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TRPCClientError-38f9a32a.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/TRPCClientError-38f9a32a.mjs\");\n/* harmony import */ var _httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./httpUtils-b9d0cb48.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/httpUtils-b9d0cb48.mjs\");\n\n\n\n\n/* eslint-disable @typescript-eslint/no-non-null-assertion */ /**\n * A function that should never be called unless we messed something up.\n */ const throwFatalError = ()=>{\n    throw new Error(\"Something went wrong. Please submit an issue at https://github.com/trpc/trpc/issues/new\");\n};\n/**\n * Dataloader that's very inspired by https://github.com/graphql/dataloader\n * Less configuration, no caching, and allows you to cancel requests\n * When cancelling a single fetch the whole batch will be cancelled only when _all_ items are cancelled\n */ function dataLoader(batchLoader) {\n    let pendingItems = null;\n    let dispatchTimer = null;\n    const destroyTimerAndPendingItems = ()=>{\n        clearTimeout(dispatchTimer);\n        dispatchTimer = null;\n        pendingItems = null;\n    };\n    /**\n   * Iterate through the items and split them into groups based on the `batchLoader`'s validate function\n   */ function groupItems(items) {\n        const groupedItems = [\n            []\n        ];\n        let index = 0;\n        while(true){\n            const item = items[index];\n            if (!item) {\n                break;\n            }\n            const lastGroup = groupedItems[groupedItems.length - 1];\n            if (item.aborted) {\n                // Item was aborted before it was dispatched\n                item.reject?.(new Error(\"Aborted\"));\n                index++;\n                continue;\n            }\n            const isValid = batchLoader.validate(lastGroup.concat(item).map((it)=>it.key));\n            if (isValid) {\n                lastGroup.push(item);\n                index++;\n                continue;\n            }\n            if (lastGroup.length === 0) {\n                item.reject?.(new Error(\"Input is too big for a single dispatch\"));\n                index++;\n                continue;\n            }\n            // Create new group, next iteration will try to add the item to that\n            groupedItems.push([]);\n        }\n        return groupedItems;\n    }\n    function dispatch() {\n        const groupedItems = groupItems(pendingItems);\n        destroyTimerAndPendingItems();\n        // Create batches for each group of items\n        for (const items of groupedItems){\n            if (!items.length) {\n                continue;\n            }\n            const batch = {\n                items,\n                cancel: throwFatalError\n            };\n            for (const item of items){\n                item.batch = batch;\n            }\n            const unitResolver = (index, value)=>{\n                const item = batch.items[index];\n                item.resolve?.(value);\n                item.batch = null;\n                item.reject = null;\n                item.resolve = null;\n            };\n            const { promise, cancel } = batchLoader.fetch(batch.items.map((_item)=>_item.key), unitResolver);\n            batch.cancel = cancel;\n            promise.then((result)=>{\n                for(let i = 0; i < result.length; i++){\n                    const value = result[i];\n                    unitResolver(i, value);\n                }\n                for (const item of batch.items){\n                    item.reject?.(new Error(\"Missing result\"));\n                    item.batch = null;\n                }\n            }).catch((cause)=>{\n                for (const item of batch.items){\n                    item.reject?.(cause);\n                    item.batch = null;\n                }\n            });\n        }\n    }\n    function load(key) {\n        const item = {\n            aborted: false,\n            key,\n            batch: null,\n            resolve: throwFatalError,\n            reject: throwFatalError\n        };\n        const promise = new Promise((resolve, reject)=>{\n            item.reject = reject;\n            item.resolve = resolve;\n            if (!pendingItems) {\n                pendingItems = [];\n            }\n            pendingItems.push(item);\n        });\n        if (!dispatchTimer) {\n            dispatchTimer = setTimeout(dispatch);\n        }\n        const cancel = ()=>{\n            item.aborted = true;\n            if (item.batch?.items.every((item)=>item.aborted)) {\n                // All items in the batch have been cancelled\n                item.batch.cancel();\n                item.batch = null;\n            }\n        };\n        return {\n            promise,\n            cancel\n        };\n    }\n    return {\n        load\n    };\n}\n/**\n * @internal\n */ function createHTTPBatchLink(requester) {\n    return function httpBatchLink(opts) {\n        const resolvedOpts = (0,_httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_3__.r)(opts);\n        const maxURLLength = opts.maxURLLength ?? Infinity;\n        // initialized config\n        return (runtime)=>{\n            const batchLoader = (type)=>{\n                const validate = (batchOps)=>{\n                    if (maxURLLength === Infinity) {\n                        // escape hatch for quick calcs\n                        return true;\n                    }\n                    const path = batchOps.map((op)=>op.path).join(\",\");\n                    const inputs = batchOps.map((op)=>op.input);\n                    const url = (0,_httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_3__.g)({\n                        ...resolvedOpts,\n                        runtime,\n                        type,\n                        path,\n                        inputs\n                    });\n                    return url.length <= maxURLLength;\n                };\n                const fetch = requester({\n                    ...resolvedOpts,\n                    runtime,\n                    type,\n                    opts\n                });\n                return {\n                    validate,\n                    fetch\n                };\n            };\n            const query = dataLoader(batchLoader(\"query\"));\n            const mutation = dataLoader(batchLoader(\"mutation\"));\n            const subscription = dataLoader(batchLoader(\"subscription\"));\n            const loaders = {\n                query,\n                subscription,\n                mutation\n            };\n            return ({ op })=>{\n                return (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observable)((observer)=>{\n                    const loader = loaders[op.type];\n                    const { promise, cancel } = loader.load(op);\n                    let _res = undefined;\n                    promise.then((res)=>{\n                        _res = res;\n                        const transformed = (0,_transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__.t)(res.json, runtime);\n                        if (!transformed.ok) {\n                            observer.error(_TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(transformed.error, {\n                                meta: res.meta\n                            }));\n                            return;\n                        }\n                        observer.next({\n                            context: res.meta,\n                            result: transformed.result\n                        });\n                        observer.complete();\n                    }).catch((err)=>{\n                        observer.error(_TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(err, {\n                            meta: _res?.meta\n                        }));\n                    });\n                    return ()=>{\n                        cancel();\n                    };\n                });\n            };\n        };\n    };\n}\nconst batchRequester = (requesterOpts)=>{\n    return (batchOps)=>{\n        const path = batchOps.map((op)=>op.path).join(\",\");\n        const inputs = batchOps.map((op)=>op.input);\n        const { promise, cancel } = (0,_httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_3__.j)({\n            ...requesterOpts,\n            path,\n            inputs,\n            headers () {\n                if (!requesterOpts.opts.headers) {\n                    return {};\n                }\n                if (typeof requesterOpts.opts.headers === \"function\") {\n                    return requesterOpts.opts.headers({\n                        opList: batchOps\n                    });\n                }\n                return requesterOpts.opts.headers;\n            }\n        });\n        return {\n            promise: promise.then((res)=>{\n                const resJSON = Array.isArray(res.json) ? res.json : batchOps.map(()=>res.json);\n                const result = resJSON.map((item)=>({\n                        meta: res.meta,\n                        json: item\n                    }));\n                return result;\n            }),\n            cancel\n        };\n    };\n};\nconst httpBatchLink = createHTTPBatchLink(batchRequester);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/httpBatchLink-d0f9eac9.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/httpUtils-b9d0cb48.mjs":
/*!********************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/httpUtils-b9d0cb48.mjs ***!
  \********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ getBody),\n/* harmony export */   b: () => (/* binding */ getFetch),\n/* harmony export */   f: () => (/* binding */ fetchHTTPResponse),\n/* harmony export */   g: () => (/* binding */ getUrl),\n/* harmony export */   h: () => (/* binding */ httpRequest),\n/* harmony export */   j: () => (/* binding */ jsonHttpRequester),\n/* harmony export */   r: () => (/* binding */ resolveHTTPLinkOptions)\n/* harmony export */ });\n/* harmony import */ var _TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TRPCClientError-38f9a32a.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/TRPCClientError-38f9a32a.mjs\");\n\nconst isFunction = (fn)=>typeof fn === \"function\";\nfunction getFetch(customFetchImpl) {\n    if (customFetchImpl) {\n        return customFetchImpl;\n    }\n    if (false) {}\n    if (typeof globalThis !== \"undefined\" && isFunction(globalThis.fetch)) {\n        return globalThis.fetch;\n    }\n    throw new Error(\"No fetch implementation found\");\n}\nfunction getAbortController(customAbortControllerImpl) {\n    if (customAbortControllerImpl) {\n        return customAbortControllerImpl;\n    }\n    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n    if (false) {}\n    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n    if (typeof globalThis !== \"undefined\" && globalThis.AbortController) {\n        return globalThis.AbortController;\n    }\n    return null;\n}\nfunction resolveHTTPLinkOptions(opts) {\n    return {\n        url: opts.url.toString().replace(/\\/$/, \"\"),\n        fetch: opts.fetch,\n        AbortController: getAbortController(opts.AbortController)\n    };\n}\n// https://github.com/trpc/trpc/pull/669\nfunction arrayToDict(array) {\n    const dict = {};\n    for(let index = 0; index < array.length; index++){\n        const element = array[index];\n        dict[index] = element;\n    }\n    return dict;\n}\nconst METHOD = {\n    query: \"GET\",\n    mutation: \"POST\"\n};\nfunction getInput(opts) {\n    return \"input\" in opts ? opts.runtime.transformer.serialize(opts.input) : arrayToDict(opts.inputs.map((_input)=>opts.runtime.transformer.serialize(_input)));\n}\nconst getUrl = (opts)=>{\n    let url = opts.url + \"/\" + opts.path;\n    const queryParts = [];\n    if (\"inputs\" in opts) {\n        queryParts.push(\"batch=1\");\n    }\n    if (opts.type === \"query\") {\n        const input = getInput(opts);\n        if (input !== undefined) {\n            queryParts.push(`input=${encodeURIComponent(JSON.stringify(input))}`);\n        }\n    }\n    if (queryParts.length) {\n        url += \"?\" + queryParts.join(\"&\");\n    }\n    return url;\n};\nconst getBody = (opts)=>{\n    if (opts.type === \"query\") {\n        return undefined;\n    }\n    const input = getInput(opts);\n    return input !== undefined ? JSON.stringify(input) : undefined;\n};\nconst jsonHttpRequester = (opts)=>{\n    return httpRequest({\n        ...opts,\n        contentTypeHeader: \"application/json\",\n        getUrl,\n        getBody\n    });\n};\nasync function fetchHTTPResponse(opts, ac) {\n    const url = opts.getUrl(opts);\n    const body = opts.getBody(opts);\n    const { type } = opts;\n    const resolvedHeaders = await opts.headers();\n    /* istanbul ignore if -- @preserve */ if (type === \"subscription\") {\n        throw new Error(\"Subscriptions should use wsLink\");\n    }\n    const headers = {\n        ...opts.contentTypeHeader ? {\n            \"content-type\": opts.contentTypeHeader\n        } : {},\n        ...opts.batchModeHeader ? {\n            \"trpc-batch-mode\": opts.batchModeHeader\n        } : {},\n        ...resolvedHeaders\n    };\n    return getFetch(opts.fetch)(url, {\n        method: METHOD[type],\n        signal: ac?.signal,\n        body: body,\n        headers\n    });\n}\nfunction httpRequest(opts) {\n    const ac = opts.AbortController ? new opts.AbortController() : null;\n    const meta = {};\n    let done = false;\n    const promise = new Promise((resolve, reject)=>{\n        fetchHTTPResponse(opts, ac).then((_res)=>{\n            meta.response = _res;\n            done = true;\n            return _res.json();\n        }).then((json)=>{\n            meta.responseJSON = json;\n            resolve({\n                json: json,\n                meta\n            });\n        }).catch((err)=>{\n            done = true;\n            reject(_TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_0__.T.from(err, {\n                meta\n            }));\n        });\n    });\n    const cancel = ()=>{\n        if (!done) {\n            ac?.abort();\n        }\n    };\n    return {\n        promise,\n        cancel\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/httpUtils-b9d0cb48.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/index.mjs":
/*!*******************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/index.mjs ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TRPCClientError: () => (/* reexport safe */ _TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__.T),\n/* harmony export */   TRPCUntypedClient: () => (/* binding */ TRPCUntypedClient),\n/* harmony export */   clientCallTypeToProcedureType: () => (/* binding */ clientCallTypeToProcedureType),\n/* harmony export */   createTRPCClient: () => (/* binding */ createTRPCClient),\n/* harmony export */   createTRPCClientProxy: () => (/* binding */ createTRPCClientProxy),\n/* harmony export */   createTRPCProxyClient: () => (/* binding */ createTRPCProxyClient),\n/* harmony export */   createTRPCUntypedClient: () => (/* binding */ createTRPCUntypedClient),\n/* harmony export */   createWSClient: () => (/* reexport safe */ _links_wsLink_mjs__WEBPACK_IMPORTED_MODULE_8__.createWSClient),\n/* harmony export */   experimental_formDataLink: () => (/* binding */ experimental_formDataLink),\n/* harmony export */   getFetch: () => (/* reexport safe */ _httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_4__.b),\n/* harmony export */   getUntypedClient: () => (/* binding */ getUntypedClient),\n/* harmony export */   httpBatchLink: () => (/* reexport safe */ _httpBatchLink_d0f9eac9_mjs__WEBPACK_IMPORTED_MODULE_5__.h),\n/* harmony export */   httpLink: () => (/* reexport safe */ _links_httpLink_mjs__WEBPACK_IMPORTED_MODULE_6__.httpLink),\n/* harmony export */   httpLinkFactory: () => (/* reexport safe */ _links_httpLink_mjs__WEBPACK_IMPORTED_MODULE_6__.httpLinkFactory),\n/* harmony export */   loggerLink: () => (/* reexport safe */ _links_loggerLink_mjs__WEBPACK_IMPORTED_MODULE_7__.loggerLink),\n/* harmony export */   splitLink: () => (/* reexport safe */ _splitLink_4c75f7be_mjs__WEBPACK_IMPORTED_MODULE_1__.s),\n/* harmony export */   unstable_httpBatchStreamLink: () => (/* binding */ unstable_httpBatchStreamLink),\n/* harmony export */   wsLink: () => (/* reexport safe */ _links_wsLink_mjs__WEBPACK_IMPORTED_MODULE_8__.wsLink)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/observable */ \"(ssr)/../../node_modules/.pnpm/@trpc+server@10.45.2/node_modules/@trpc/server/dist/observable/index.mjs\");\n/* harmony import */ var _splitLink_4c75f7be_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./splitLink-4c75f7be.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/splitLink-4c75f7be.mjs\");\n/* harmony import */ var _TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TRPCClientError-38f9a32a.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/TRPCClientError-38f9a32a.mjs\");\n/* harmony import */ var _trpc_server_shared__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @trpc/server/shared */ \"(ssr)/../../node_modules/.pnpm/@trpc+server@10.45.2/node_modules/@trpc/server/dist/shared/index.mjs\");\n/* harmony import */ var _httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./httpUtils-b9d0cb48.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/httpUtils-b9d0cb48.mjs\");\n/* harmony import */ var _httpBatchLink_d0f9eac9_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./httpBatchLink-d0f9eac9.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/httpBatchLink-d0f9eac9.mjs\");\n/* harmony import */ var _links_httpLink_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./links/httpLink.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/links/httpLink.mjs\");\n/* harmony import */ var _links_loggerLink_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./links/loggerLink.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/links/loggerLink.mjs\");\n/* harmony import */ var _links_wsLink_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./links/wsLink.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/links/wsLink.mjs\");\n/* harmony import */ var _transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./transformResult-ace864b8.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/transformResult-ace864b8.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass TRPCUntypedClient {\n    $request({ type, input, path, context = {} }) {\n        const chain$ = (0,_splitLink_4c75f7be_mjs__WEBPACK_IMPORTED_MODULE_1__.c)({\n            links: this.links,\n            op: {\n                id: ++this.requestId,\n                type,\n                path,\n                input,\n                context\n            }\n        });\n        return chain$.pipe((0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.share)());\n    }\n    requestAsPromise(opts) {\n        const req$ = this.$request(opts);\n        const { promise, abort } = (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observableToPromise)(req$);\n        const abortablePromise = new Promise((resolve, reject)=>{\n            opts.signal?.addEventListener(\"abort\", abort);\n            promise.then((envelope)=>{\n                resolve(envelope.result.data);\n            }).catch((err)=>{\n                reject(_TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(err));\n            });\n        });\n        return abortablePromise;\n    }\n    query(path, input, opts) {\n        return this.requestAsPromise({\n            type: \"query\",\n            path,\n            input,\n            context: opts?.context,\n            signal: opts?.signal\n        });\n    }\n    mutation(path, input, opts) {\n        return this.requestAsPromise({\n            type: \"mutation\",\n            path,\n            input,\n            context: opts?.context,\n            signal: opts?.signal\n        });\n    }\n    subscription(path, input, opts) {\n        const observable$ = this.$request({\n            type: \"subscription\",\n            path,\n            input,\n            context: opts?.context\n        });\n        return observable$.subscribe({\n            next (envelope) {\n                if (envelope.result.type === \"started\") {\n                    opts.onStarted?.();\n                } else if (envelope.result.type === \"stopped\") {\n                    opts.onStopped?.();\n                } else {\n                    opts.onData?.(envelope.result.data);\n                }\n            },\n            error (err) {\n                opts.onError?.(err);\n            },\n            complete () {\n                opts.onComplete?.();\n            }\n        });\n    }\n    constructor(opts){\n        this.requestId = 0;\n        const combinedTransformer = (()=>{\n            const transformer = opts.transformer;\n            if (!transformer) {\n                return {\n                    input: {\n                        serialize: (data)=>data,\n                        deserialize: (data)=>data\n                    },\n                    output: {\n                        serialize: (data)=>data,\n                        deserialize: (data)=>data\n                    }\n                };\n            }\n            if (\"input\" in transformer) {\n                return opts.transformer;\n            }\n            return {\n                input: transformer,\n                output: transformer\n            };\n        })();\n        this.runtime = {\n            transformer: {\n                serialize: (data)=>combinedTransformer.input.serialize(data),\n                deserialize: (data)=>combinedTransformer.output.deserialize(data)\n            },\n            combinedTransformer\n        };\n        // Initialize the links\n        this.links = opts.links.map((link)=>link(this.runtime));\n    }\n}\nfunction createTRPCUntypedClient(opts) {\n    return new TRPCUntypedClient(opts);\n}\n/**\n * @deprecated use `createTRPCProxyClient` instead\n */ function createTRPCClient(opts) {\n    const client = new TRPCUntypedClient(opts);\n    return client;\n}\nconst clientCallTypeMap = {\n    query: \"query\",\n    mutate: \"mutation\",\n    subscribe: \"subscription\"\n};\n/** @internal */ const clientCallTypeToProcedureType = (clientCallType)=>{\n    return clientCallTypeMap[clientCallType];\n};\n/**\n * @deprecated use `createTRPCProxyClient` instead\n * @internal\n */ function createTRPCClientProxy(client) {\n    return (0,_trpc_server_shared__WEBPACK_IMPORTED_MODULE_3__.createFlatProxy)((key)=>{\n        if (client.hasOwnProperty(key)) {\n            return client[key];\n        }\n        if (key === \"__untypedClient\") {\n            return client;\n        }\n        return (0,_trpc_server_shared__WEBPACK_IMPORTED_MODULE_3__.createRecursiveProxy)(({ path, args })=>{\n            const pathCopy = [\n                key,\n                ...path\n            ];\n            const procedureType = clientCallTypeToProcedureType(pathCopy.pop());\n            const fullPath = pathCopy.join(\".\");\n            return client[procedureType](fullPath, ...args);\n        });\n    });\n}\nfunction createTRPCProxyClient(opts) {\n    const client = new TRPCUntypedClient(opts);\n    const proxy = createTRPCClientProxy(client);\n    return proxy;\n}\n/**\n * Get an untyped client from a proxy client\n * @internal\n */ function getUntypedClient(client) {\n    return client.__untypedClient;\n}\nfunction getTextDecoder(customTextDecoder) {\n    if (customTextDecoder) {\n        return customTextDecoder;\n    }\n    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n    if (false) {}\n    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n    if (typeof globalThis !== \"undefined\" && globalThis.TextDecoder) {\n        return new globalThis.TextDecoder();\n    }\n    throw new Error(\"No TextDecoder implementation found\");\n}\n// Stream parsing adapted from https://www.loginradius.com/blog/engineering/guest-post/http-streaming-with-nodejs-and-fetch-api/\n/**\n * @internal\n * @description Take a stream of bytes and call `onLine` with\n * a JSON object for each line in the stream. Expected stream\n * format is:\n * ```json\n * {\"1\": {...}\n * ,\"0\": {...}\n * }\n * ```\n */ async function parseJSONStream(opts) {\n    const parse = opts.parse ?? JSON.parse;\n    const onLine = (line)=>{\n        if (opts.signal?.aborted) return;\n        if (!line || line === \"}\") {\n            return;\n        }\n        /**\n     * At this point, `line` can be one of two things:\n     * - The first line of the stream `{\"2\":{...}`\n     * - A line in the middle of the stream `,\"2\":{...}`\n     */ const indexOfColon = line.indexOf(\":\");\n        const indexAsStr = line.substring(2, indexOfColon - 1);\n        const text = line.substring(indexOfColon + 1);\n        opts.onSingle(Number(indexAsStr), parse(text));\n    };\n    await readLines(opts.readableStream, onLine, opts.textDecoder);\n}\n/**\n * Handle transforming a stream of bytes into lines of text.\n * To avoid using AsyncIterators / AsyncGenerators,\n * we use a callback for each line.\n *\n * @param readableStream can be a NodeJS stream or a WebAPI stream\n * @param onLine will be called for every line ('\\n' delimited) in the stream\n */ async function readLines(readableStream, onLine, textDecoder) {\n    let partOfLine = \"\";\n    const onChunk = (chunk)=>{\n        const chunkText = textDecoder.decode(chunk);\n        const chunkLines = chunkText.split(\"\\n\");\n        if (chunkLines.length === 1) {\n            partOfLine += chunkLines[0];\n        } else if (chunkLines.length > 1) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- length checked on line above\n            onLine(partOfLine + chunkLines[0]);\n            for(let i = 1; i < chunkLines.length - 1; i++){\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- length checked on line above\n                onLine(chunkLines[i]);\n            }\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- length doesn't change, so is necessarily > 1\n            partOfLine = chunkLines[chunkLines.length - 1];\n        }\n    };\n    // we handle 2 different types of streams, this if where we figure out which one we have\n    if (\"getReader\" in readableStream) {\n        await readStandardChunks(readableStream, onChunk);\n    } else {\n        await readNodeChunks(readableStream, onChunk);\n    }\n    onLine(partOfLine);\n}\n/**\n * Handle NodeJS stream\n */ function readNodeChunks(stream, onChunk) {\n    return new Promise((resolve)=>{\n        stream.on(\"data\", onChunk);\n        stream.on(\"end\", resolve);\n    });\n}\n/**\n * Handle WebAPI stream\n */ async function readStandardChunks(stream, onChunk) {\n    const reader = stream.getReader();\n    let readResult = await reader.read();\n    while(!readResult.done){\n        onChunk(readResult.value);\n        readResult = await reader.read();\n    }\n}\nconst streamingJsonHttpRequester = (opts, onSingle)=>{\n    const ac = opts.AbortController ? new opts.AbortController() : null;\n    const responsePromise = (0,_httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_4__.f)({\n        ...opts,\n        contentTypeHeader: \"application/json\",\n        batchModeHeader: \"stream\",\n        getUrl: _httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_4__.g,\n        getBody: _httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_4__.a\n    }, ac);\n    const cancel = ()=>ac?.abort();\n    const promise = responsePromise.then(async (res)=>{\n        if (!res.body) throw new Error(\"Received response without body\");\n        const meta = {\n            response: res\n        };\n        return parseJSONStream({\n            readableStream: res.body,\n            onSingle,\n            parse: (string)=>({\n                    json: JSON.parse(string),\n                    meta\n                }),\n            signal: ac?.signal,\n            textDecoder: opts.textDecoder\n        });\n    });\n    return {\n        cancel,\n        promise\n    };\n};\nconst streamRequester = (requesterOpts)=>{\n    const textDecoder = getTextDecoder(requesterOpts.opts.textDecoder);\n    return (batchOps, unitResolver)=>{\n        const path = batchOps.map((op)=>op.path).join(\",\");\n        const inputs = batchOps.map((op)=>op.input);\n        const { cancel, promise } = streamingJsonHttpRequester({\n            ...requesterOpts,\n            textDecoder,\n            path,\n            inputs,\n            headers () {\n                if (!requesterOpts.opts.headers) {\n                    return {};\n                }\n                if (typeof requesterOpts.opts.headers === \"function\") {\n                    return requesterOpts.opts.headers({\n                        opList: batchOps\n                    });\n                }\n                return requesterOpts.opts.headers;\n            }\n        }, (index, res)=>{\n            unitResolver(index, res);\n        });\n        return {\n            /**\n       * return an empty array because the batchLoader expects an array of results\n       * but we've already called the `unitResolver` for each of them, there's\n       * nothing left to do here.\n       */ promise: promise.then(()=>[]),\n            cancel\n        };\n    };\n};\nconst unstable_httpBatchStreamLink = (0,_httpBatchLink_d0f9eac9_mjs__WEBPACK_IMPORTED_MODULE_5__.c)(streamRequester);\nconst getBody = (opts)=>{\n    if (!(\"input\" in opts)) {\n        return undefined;\n    }\n    if (!(opts.input instanceof FormData)) {\n        throw new Error(\"Input is not FormData\");\n    }\n    return opts.input;\n};\nconst formDataRequester = (opts)=>{\n    if (opts.type !== \"mutation\") {\n        // TODO(?) handle formdata queries\n        throw new Error(\"We only handle mutations with formdata\");\n    }\n    return (0,_httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_4__.h)({\n        ...opts,\n        getUrl () {\n            return `${opts.url}/${opts.path}`;\n        },\n        getBody\n    });\n};\nconst experimental_formDataLink = (0,_links_httpLink_mjs__WEBPACK_IMPORTED_MODULE_6__.httpLinkFactory)({\n    requester: formDataRequester\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/links/httpLink.mjs":
/*!****************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/links/httpLink.mjs ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   httpLink: () => (/* binding */ httpLink),\n/* harmony export */   httpLinkFactory: () => (/* binding */ httpLinkFactory)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/observable */ \"(ssr)/../../node_modules/.pnpm/@trpc+server@10.45.2/node_modules/@trpc/server/dist/observable/index.mjs\");\n/* harmony import */ var _transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../transformResult-ace864b8.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/transformResult-ace864b8.mjs\");\n/* harmony import */ var _TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../TRPCClientError-38f9a32a.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/TRPCClientError-38f9a32a.mjs\");\n/* harmony import */ var _httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../httpUtils-b9d0cb48.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/httpUtils-b9d0cb48.mjs\");\n/* harmony import */ var _trpc_server_shared__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @trpc/server/shared */ \"(ssr)/../../node_modules/.pnpm/@trpc+server@10.45.2/node_modules/@trpc/server/dist/shared/index.mjs\");\n\n\n\n\n\nfunction httpLinkFactory(factoryOpts) {\n    return (opts)=>{\n        const resolvedOpts = (0,_httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_3__.r)(opts);\n        return (runtime)=>({ op })=>(0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observable)((observer)=>{\n                    const { path, input, type } = op;\n                    const { promise, cancel } = factoryOpts.requester({\n                        ...resolvedOpts,\n                        runtime,\n                        type,\n                        path,\n                        input,\n                        headers () {\n                            if (!opts.headers) {\n                                return {};\n                            }\n                            if (typeof opts.headers === \"function\") {\n                                return opts.headers({\n                                    op\n                                });\n                            }\n                            return opts.headers;\n                        }\n                    });\n                    let meta = undefined;\n                    promise.then((res)=>{\n                        meta = res.meta;\n                        const transformed = (0,_transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__.t)(res.json, runtime);\n                        if (!transformed.ok) {\n                            observer.error(_TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(transformed.error, {\n                                meta\n                            }));\n                            return;\n                        }\n                        observer.next({\n                            context: res.meta,\n                            result: transformed.result\n                        });\n                        observer.complete();\n                    }).catch((cause)=>{\n                        observer.error(_TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(cause, {\n                            meta\n                        }));\n                    });\n                    return ()=>{\n                        cancel();\n                    };\n                });\n    };\n}\n/**\n * @see https://trpc.io/docs/client/links/httpLink\n */ const httpLink = httpLinkFactory({\n    requester: _httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_3__.j\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0cnBjK2NsaWVudEAxMC40NS4yX0B0cnBjK3NlcnZlckAxMC40NS4yL25vZGVfbW9kdWxlcy9AdHJwYy9jbGllbnQvZGlzdC9saW5rcy9odHRwTGluay5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFxRDtBQUNrQjtBQUNBO0FBQ3lCO0FBQ25FO0FBRTdCLFNBQVNTLGdCQUFnQkMsV0FBVztJQUNoQyxPQUFPLENBQUNDO1FBQ0osTUFBTUMsZUFBZU4sMERBQXNCQSxDQUFDSztRQUM1QyxPQUFPLENBQUNFLFVBQVUsQ0FBQyxFQUFFQyxFQUFFLEVBQUcsR0FBR2QsbUVBQVVBLENBQUMsQ0FBQ2U7b0JBQzdCLE1BQU0sRUFBRUMsSUFBSSxFQUFHQyxLQUFLLEVBQUdDLElBQUksRUFBRyxHQUFHSjtvQkFDakMsTUFBTSxFQUFFSyxPQUFPLEVBQUdDLE1BQU0sRUFBRyxHQUFHVixZQUFZVyxTQUFTLENBQUM7d0JBQ2hELEdBQUdULFlBQVk7d0JBQ2ZDO3dCQUNBSzt3QkFDQUY7d0JBQ0FDO3dCQUNBSzs0QkFDSSxJQUFJLENBQUNYLEtBQUtXLE9BQU8sRUFBRTtnQ0FDZixPQUFPLENBQUM7NEJBQ1o7NEJBQ0EsSUFBSSxPQUFPWCxLQUFLVyxPQUFPLEtBQUssWUFBWTtnQ0FDcEMsT0FBT1gsS0FBS1csT0FBTyxDQUFDO29DQUNoQlI7Z0NBQ0o7NEJBQ0o7NEJBQ0EsT0FBT0gsS0FBS1csT0FBTzt3QkFDdkI7b0JBQ0o7b0JBQ0EsSUFBSUMsT0FBT0M7b0JBQ1hMLFFBQVFNLElBQUksQ0FBQyxDQUFDQzt3QkFDVkgsT0FBT0csSUFBSUgsSUFBSTt3QkFDZixNQUFNSSxjQUFjekIsZ0VBQWVBLENBQUN3QixJQUFJRSxJQUFJLEVBQUVmO3dCQUM5QyxJQUFJLENBQUNjLFlBQVlFLEVBQUUsRUFBRTs0QkFDakJkLFNBQVNlLEtBQUssQ0FBQzFCLDREQUFlQSxDQUFDMkIsSUFBSSxDQUFDSixZQUFZRyxLQUFLLEVBQUU7Z0NBQ25EUDs0QkFDSjs0QkFDQTt3QkFDSjt3QkFDQVIsU0FBU2lCLElBQUksQ0FBQzs0QkFDVkMsU0FBU1AsSUFBSUgsSUFBSTs0QkFDakJXLFFBQVFQLFlBQVlPLE1BQU07d0JBQzlCO3dCQUNBbkIsU0FBU29CLFFBQVE7b0JBQ3JCLEdBQUdDLEtBQUssQ0FBQyxDQUFDQzt3QkFDTnRCLFNBQVNlLEtBQUssQ0FBQzFCLDREQUFlQSxDQUFDMkIsSUFBSSxDQUFDTSxPQUFPOzRCQUN2Q2Q7d0JBQ0o7b0JBQ0o7b0JBQ0EsT0FBTzt3QkFDSEg7b0JBQ0o7Z0JBQ0o7SUFDWjtBQUNKO0FBQ0E7O0NBRUMsR0FBRyxNQUFNa0IsV0FBVzdCLGdCQUFnQjtJQUNqQ1ksV0FBV2Isc0RBQWlCQTtBQUNoQztBQUVxQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BtaWRpdml6L3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHRycGMrY2xpZW50QDEwLjQ1LjJfQHRycGMrc2VydmVyQDEwLjQ1LjIvbm9kZV9tb2R1bGVzL0B0cnBjL2NsaWVudC9kaXN0L2xpbmtzL2h0dHBMaW5rLm1qcz9hMmVmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG9ic2VydmFibGUgfSBmcm9tICdAdHJwYy9zZXJ2ZXIvb2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyB0IGFzIHRyYW5zZm9ybVJlc3VsdCB9IGZyb20gJy4uL3RyYW5zZm9ybVJlc3VsdC1hY2U4NjRiOC5tanMnO1xuaW1wb3J0IHsgVCBhcyBUUlBDQ2xpZW50RXJyb3IgfSBmcm9tICcuLi9UUlBDQ2xpZW50RXJyb3ItMzhmOWEzMmEubWpzJztcbmltcG9ydCB7IHIgYXMgcmVzb2x2ZUhUVFBMaW5rT3B0aW9ucywgaiBhcyBqc29uSHR0cFJlcXVlc3RlciB9IGZyb20gJy4uL2h0dHBVdGlscy1iOWQwY2I0OC5tanMnO1xuaW1wb3J0ICdAdHJwYy9zZXJ2ZXIvc2hhcmVkJztcblxuZnVuY3Rpb24gaHR0cExpbmtGYWN0b3J5KGZhY3RvcnlPcHRzKSB7XG4gICAgcmV0dXJuIChvcHRzKT0+e1xuICAgICAgICBjb25zdCByZXNvbHZlZE9wdHMgPSByZXNvbHZlSFRUUExpbmtPcHRpb25zKG9wdHMpO1xuICAgICAgICByZXR1cm4gKHJ1bnRpbWUpPT4oeyBvcCAgfSk9Pm9ic2VydmFibGUoKG9ic2VydmVyKT0+e1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHBhdGggLCBpbnB1dCAsIHR5cGUgIH0gPSBvcDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBwcm9taXNlICwgY2FuY2VsICB9ID0gZmFjdG9yeU9wdHMucmVxdWVzdGVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnJlc29sdmVkT3B0cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bnRpbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVycyAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFvcHRzLmhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9wdHMuaGVhZGVycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0cy5oZWFkZXJzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0cy5oZWFkZXJzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG1ldGEgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIHByb21pc2UudGhlbigocmVzKT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgbWV0YSA9IHJlcy5tZXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHJhbnNmb3JtZWQgPSB0cmFuc2Zvcm1SZXN1bHQocmVzLmpzb24sIHJ1bnRpbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0cmFuc2Zvcm1lZC5vaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKFRSUENDbGllbnRFcnJvci5mcm9tKHRyYW5zZm9ybWVkLmVycm9yLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dDogcmVzLm1ldGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiB0cmFuc2Zvcm1lZC5yZXN1bHRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goKGNhdXNlKT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoVFJQQ0NsaWVudEVycm9yLmZyb20oY2F1c2UsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRhXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbmNlbCgpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgIH07XG59XG4vKipcbiAqIEBzZWUgaHR0cHM6Ly90cnBjLmlvL2RvY3MvY2xpZW50L2xpbmtzL2h0dHBMaW5rXG4gKi8gY29uc3QgaHR0cExpbmsgPSBodHRwTGlua0ZhY3Rvcnkoe1xuICAgIHJlcXVlc3RlcjoganNvbkh0dHBSZXF1ZXN0ZXJcbn0pO1xuXG5leHBvcnQgeyBodHRwTGluaywgaHR0cExpbmtGYWN0b3J5IH07XG4iXSwibmFtZXMiOlsib2JzZXJ2YWJsZSIsInQiLCJ0cmFuc2Zvcm1SZXN1bHQiLCJUIiwiVFJQQ0NsaWVudEVycm9yIiwiciIsInJlc29sdmVIVFRQTGlua09wdGlvbnMiLCJqIiwianNvbkh0dHBSZXF1ZXN0ZXIiLCJodHRwTGlua0ZhY3RvcnkiLCJmYWN0b3J5T3B0cyIsIm9wdHMiLCJyZXNvbHZlZE9wdHMiLCJydW50aW1lIiwib3AiLCJvYnNlcnZlciIsInBhdGgiLCJpbnB1dCIsInR5cGUiLCJwcm9taXNlIiwiY2FuY2VsIiwicmVxdWVzdGVyIiwiaGVhZGVycyIsIm1ldGEiLCJ1bmRlZmluZWQiLCJ0aGVuIiwicmVzIiwidHJhbnNmb3JtZWQiLCJqc29uIiwib2siLCJlcnJvciIsImZyb20iLCJuZXh0IiwiY29udGV4dCIsInJlc3VsdCIsImNvbXBsZXRlIiwiY2F0Y2giLCJjYXVzZSIsImh0dHBMaW5rIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/links/httpLink.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/links/loggerLink.mjs":
/*!******************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/links/loggerLink.mjs ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loggerLink: () => (/* binding */ loggerLink)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/observable */ \"(ssr)/../../node_modules/.pnpm/@trpc+server@10.45.2/node_modules/@trpc/server/dist/observable/index.mjs\");\n\n/// <reference lib=\"dom.iterable\" />\nfunction isFormData(value) {\n    if (typeof FormData === \"undefined\") {\n        // FormData is not supported\n        return false;\n    }\n    return value instanceof FormData;\n}\nconst palettes = {\n    css: {\n        query: [\n            \"72e3ff\",\n            \"3fb0d8\"\n        ],\n        mutation: [\n            \"c5a3fc\",\n            \"904dfc\"\n        ],\n        subscription: [\n            \"ff49e1\",\n            \"d83fbe\"\n        ]\n    },\n    ansi: {\n        regular: {\n            // Cyan background, black and white text respectively\n            query: [\n                \"\\x1b[30;46m\",\n                \"\\x1b[97;46m\"\n            ],\n            // Magenta background, black and white text respectively\n            mutation: [\n                \"\\x1b[30;45m\",\n                \"\\x1b[97;45m\"\n            ],\n            // Green background, black and white text respectively\n            subscription: [\n                \"\\x1b[30;42m\",\n                \"\\x1b[97;42m\"\n            ]\n        },\n        bold: {\n            query: [\n                \"\\x1b[1;30;46m\",\n                \"\\x1b[1;97;46m\"\n            ],\n            mutation: [\n                \"\\x1b[1;30;45m\",\n                \"\\x1b[1;97;45m\"\n            ],\n            subscription: [\n                \"\\x1b[1;30;42m\",\n                \"\\x1b[1;97;42m\"\n            ]\n        }\n    }\n};\nfunction constructPartsAndArgs(opts) {\n    const { direction, type, path, id, input } = opts;\n    const parts = [];\n    const args = [];\n    if (opts.colorMode === \"ansi\") {\n        const [lightRegular, darkRegular] = palettes.ansi.regular[type];\n        const [lightBold, darkBold] = palettes.ansi.bold[type];\n        const reset = \"\\x1b[0m\";\n        parts.push(direction === \"up\" ? lightRegular : darkRegular, direction === \"up\" ? \">>\" : \"<<\", type, direction === \"up\" ? lightBold : darkBold, `#${id}`, path, reset);\n        if (direction === \"up\") {\n            args.push({\n                input: opts.input\n            });\n        } else {\n            args.push({\n                input: opts.input,\n                // strip context from result cause it's too noisy in terminal wihtout collapse mode\n                result: \"result\" in opts.result ? opts.result.result : opts.result,\n                elapsedMs: opts.elapsedMs\n            });\n        }\n        return {\n            parts,\n            args\n        };\n    }\n    const [light, dark] = palettes.css[type];\n    const css = `\n    background-color: #${direction === \"up\" ? light : dark}; \n    color: ${direction === \"up\" ? \"black\" : \"white\"};\n    padding: 2px;\n  `;\n    parts.push(\"%c\", direction === \"up\" ? \">>\" : \"<<\", type, `#${id}`, `%c${path}%c`, \"%O\");\n    args.push(css, `${css}; font-weight: bold;`, `${css}; font-weight: normal;`);\n    if (direction === \"up\") {\n        args.push({\n            input,\n            context: opts.context\n        });\n    } else {\n        args.push({\n            input,\n            result: opts.result,\n            elapsedMs: opts.elapsedMs,\n            context: opts.context\n        });\n    }\n    return {\n        parts,\n        args\n    };\n}\n// maybe this should be moved to it's own package\nconst defaultLogger = ({ c = console, colorMode = \"css\" })=>(props)=>{\n        const rawInput = props.input;\n        const input = isFormData(rawInput) ? Object.fromEntries(rawInput) : rawInput;\n        const { parts, args } = constructPartsAndArgs({\n            ...props,\n            colorMode,\n            input\n        });\n        const fn = props.direction === \"down\" && props.result && (props.result instanceof Error || \"error\" in props.result.result) ? \"error\" : \"log\";\n        c[fn].apply(null, [\n            parts.join(\" \")\n        ].concat(args));\n    };\n/**\n * @see https://trpc.io/docs/client/links/loggerLink\n */ function loggerLink(opts = {}) {\n    const { enabled = ()=>true } = opts;\n    const colorMode = opts.colorMode ?? ( true ? \"ansi\" : 0);\n    const { logger = defaultLogger({\n        c: opts.console,\n        colorMode\n    }) } = opts;\n    return ()=>{\n        return ({ op, next })=>{\n            return (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observable)((observer)=>{\n                // ->\n                enabled({\n                    ...op,\n                    direction: \"up\"\n                }) && logger({\n                    ...op,\n                    direction: \"up\"\n                });\n                const requestStartTime = Date.now();\n                function logResult(result) {\n                    const elapsedMs = Date.now() - requestStartTime;\n                    enabled({\n                        ...op,\n                        direction: \"down\",\n                        result\n                    }) && logger({\n                        ...op,\n                        direction: \"down\",\n                        elapsedMs,\n                        result\n                    });\n                }\n                return next(op).pipe((0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.tap)({\n                    next (result) {\n                        logResult(result);\n                    },\n                    error (result) {\n                        logResult(result);\n                    }\n                })).subscribe(observer);\n            });\n        };\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0cnBjK2NsaWVudEAxMC40NS4yX0B0cnBjK3NlcnZlckAxMC40NS4yL25vZGVfbW9kdWxlcy9AdHJwYy9jbGllbnQvZGlzdC9saW5rcy9sb2dnZXJMaW5rLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUEwRDtBQUUxRCxvQ0FBb0M7QUFDcEMsU0FBU0UsV0FBV0MsS0FBSztJQUNyQixJQUFJLE9BQU9DLGFBQWEsYUFBYTtRQUNqQyw0QkFBNEI7UUFDNUIsT0FBTztJQUNYO0lBQ0EsT0FBT0QsaUJBQWlCQztBQUM1QjtBQUNBLE1BQU1DLFdBQVc7SUFDYkMsS0FBSztRQUNEQyxPQUFPO1lBQ0g7WUFDQTtTQUNIO1FBQ0RDLFVBQVU7WUFDTjtZQUNBO1NBQ0g7UUFDREMsY0FBYztZQUNWO1lBQ0E7U0FDSDtJQUNMO0lBQ0FDLE1BQU07UUFDRkMsU0FBUztZQUNMLHFEQUFxRDtZQUNyREosT0FBTztnQkFDSDtnQkFDQTthQUNIO1lBQ0Qsd0RBQXdEO1lBQ3hEQyxVQUFVO2dCQUNOO2dCQUNBO2FBQ0g7WUFDRCxzREFBc0Q7WUFDdERDLGNBQWM7Z0JBQ1Y7Z0JBQ0E7YUFDSDtRQUNMO1FBQ0FHLE1BQU07WUFDRkwsT0FBTztnQkFDSDtnQkFDQTthQUNIO1lBQ0RDLFVBQVU7Z0JBQ047Z0JBQ0E7YUFDSDtZQUNEQyxjQUFjO2dCQUNWO2dCQUNBO2FBQ0g7UUFDTDtJQUNKO0FBQ0o7QUFDQSxTQUFTSSxzQkFBc0JDLElBQUk7SUFDL0IsTUFBTSxFQUFFQyxTQUFTLEVBQUdDLElBQUksRUFBR0MsSUFBSSxFQUFHQyxFQUFFLEVBQUdDLEtBQUssRUFBRyxHQUFHTDtJQUNsRCxNQUFNTSxRQUFRLEVBQUU7SUFDaEIsTUFBTUMsT0FBTyxFQUFFO0lBQ2YsSUFBSVAsS0FBS1EsU0FBUyxLQUFLLFFBQVE7UUFDM0IsTUFBTSxDQUFDQyxjQUFjQyxZQUFZLEdBQUduQixTQUFTSyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0ssS0FBSztRQUMvRCxNQUFNLENBQUNTLFdBQVdDLFNBQVMsR0FBR3JCLFNBQVNLLElBQUksQ0FBQ0UsSUFBSSxDQUFDSSxLQUFLO1FBQ3RELE1BQU1XLFFBQVE7UUFDZFAsTUFBTVEsSUFBSSxDQUFDYixjQUFjLE9BQU9RLGVBQWVDLGFBQWFULGNBQWMsT0FBTyxPQUFPLE1BQU1DLE1BQU1ELGNBQWMsT0FBT1UsWUFBWUMsVUFBVSxDQUFDLENBQUMsRUFBRVIsR0FBRyxDQUFDLEVBQUVELE1BQU1VO1FBQy9KLElBQUlaLGNBQWMsTUFBTTtZQUNwQk0sS0FBS08sSUFBSSxDQUFDO2dCQUNOVCxPQUFPTCxLQUFLSyxLQUFLO1lBQ3JCO1FBQ0osT0FBTztZQUNIRSxLQUFLTyxJQUFJLENBQUM7Z0JBQ05ULE9BQU9MLEtBQUtLLEtBQUs7Z0JBQ2pCLG1GQUFtRjtnQkFDbkZVLFFBQVEsWUFBWWYsS0FBS2UsTUFBTSxHQUFHZixLQUFLZSxNQUFNLENBQUNBLE1BQU0sR0FBR2YsS0FBS2UsTUFBTTtnQkFDbEVDLFdBQVdoQixLQUFLZ0IsU0FBUztZQUM3QjtRQUNKO1FBQ0EsT0FBTztZQUNIVjtZQUNBQztRQUNKO0lBQ0o7SUFDQSxNQUFNLENBQUNVLE9BQU9DLEtBQUssR0FBRzNCLFNBQVNDLEdBQUcsQ0FBQ1UsS0FBSztJQUN4QyxNQUFNVixNQUFNLENBQUM7dUJBQ00sRUFBRVMsY0FBYyxPQUFPZ0IsUUFBUUMsS0FBSztXQUNoRCxFQUFFakIsY0FBYyxPQUFPLFVBQVUsUUFBUTs7RUFFbEQsQ0FBQztJQUNDSyxNQUFNUSxJQUFJLENBQUMsTUFBTWIsY0FBYyxPQUFPLE9BQU8sTUFBTUMsTUFBTSxDQUFDLENBQUMsRUFBRUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUVELEtBQUssRUFBRSxDQUFDLEVBQUU7SUFDbEZJLEtBQUtPLElBQUksQ0FBQ3RCLEtBQUssQ0FBQyxFQUFFQSxJQUFJLG9CQUFvQixDQUFDLEVBQUUsQ0FBQyxFQUFFQSxJQUFJLHNCQUFzQixDQUFDO0lBQzNFLElBQUlTLGNBQWMsTUFBTTtRQUNwQk0sS0FBS08sSUFBSSxDQUFDO1lBQ05UO1lBQ0FjLFNBQVNuQixLQUFLbUIsT0FBTztRQUN6QjtJQUNKLE9BQU87UUFDSFosS0FBS08sSUFBSSxDQUFDO1lBQ05UO1lBQ0FVLFFBQVFmLEtBQUtlLE1BQU07WUFDbkJDLFdBQVdoQixLQUFLZ0IsU0FBUztZQUN6QkcsU0FBU25CLEtBQUttQixPQUFPO1FBQ3pCO0lBQ0o7SUFDQSxPQUFPO1FBQ0hiO1FBQ0FDO0lBQ0o7QUFDSjtBQUNBLGlEQUFpRDtBQUNqRCxNQUFNYSxnQkFBZ0IsQ0FBQyxFQUFFQyxJQUFHQyxPQUFPLEVBQUdkLFlBQVcsS0FBSyxFQUFHLEdBQUcsQ0FBQ2U7UUFDckQsTUFBTUMsV0FBV0QsTUFBTWxCLEtBQUs7UUFDNUIsTUFBTUEsUUFBUWpCLFdBQVdvQyxZQUFZQyxPQUFPQyxXQUFXLENBQUNGLFlBQVlBO1FBQ3BFLE1BQU0sRUFBRWxCLEtBQUssRUFBR0MsSUFBSSxFQUFHLEdBQUdSLHNCQUFzQjtZQUM1QyxHQUFHd0IsS0FBSztZQUNSZjtZQUNBSDtRQUNKO1FBQ0EsTUFBTXNCLEtBQUtKLE1BQU10QixTQUFTLEtBQUssVUFBVXNCLE1BQU1SLE1BQU0sSUFBS1EsQ0FBQUEsTUFBTVIsTUFBTSxZQUFZYSxTQUFTLFdBQVdMLE1BQU1SLE1BQU0sQ0FBQ0EsTUFBTSxJQUFJLFVBQVU7UUFDdklNLENBQUMsQ0FBQ00sR0FBRyxDQUFDRSxLQUFLLENBQUMsTUFBTTtZQUNkdkIsTUFBTXdCLElBQUksQ0FBQztTQUNkLENBQUNDLE1BQU0sQ0FBQ3hCO0lBQ2I7QUFDSjs7Q0FFQyxHQUFHLFNBQVN5QixXQUFXaEMsT0FBTyxDQUFDLENBQUM7SUFDN0IsTUFBTSxFQUFFaUMsVUFBUyxJQUFJLElBQUksRUFBRyxHQUFHakM7SUFDL0IsTUFBTVEsWUFBWVIsS0FBS1EsU0FBUyxJQUFLLE1BQWtCLEdBQWMsU0FBUyxDQUFJO0lBQ2xGLE1BQU0sRUFBRTBCLFNBQVFkLGNBQWM7UUFDMUJDLEdBQUdyQixLQUFLc0IsT0FBTztRQUNmZDtJQUNKLEVBQUUsRUFBRyxHQUFHUjtJQUNSLE9BQU87UUFDSCxPQUFPLENBQUMsRUFBRW1DLEVBQUUsRUFBR0MsSUFBSSxFQUFHO1lBQ2xCLE9BQU9sRCxtRUFBVUEsQ0FBQyxDQUFDbUQ7Z0JBQ2YsS0FBSztnQkFDTEosUUFBUTtvQkFDSixHQUFHRSxFQUFFO29CQUNMbEMsV0FBVztnQkFDZixNQUFNaUMsT0FBTztvQkFDVCxHQUFHQyxFQUFFO29CQUNMbEMsV0FBVztnQkFDZjtnQkFDQSxNQUFNcUMsbUJBQW1CQyxLQUFLQyxHQUFHO2dCQUNqQyxTQUFTQyxVQUFVMUIsTUFBTTtvQkFDckIsTUFBTUMsWUFBWXVCLEtBQUtDLEdBQUcsS0FBS0Y7b0JBQy9CTCxRQUFRO3dCQUNKLEdBQUdFLEVBQUU7d0JBQ0xsQyxXQUFXO3dCQUNYYztvQkFDSixNQUFNbUIsT0FBTzt3QkFDVCxHQUFHQyxFQUFFO3dCQUNMbEMsV0FBVzt3QkFDWGU7d0JBQ0FEO29CQUNKO2dCQUNKO2dCQUNBLE9BQU9xQixLQUFLRCxJQUFJTyxJQUFJLENBQUN2RCw0REFBR0EsQ0FBQztvQkFDckJpRCxNQUFNckIsTUFBTTt3QkFDUjBCLFVBQVUxQjtvQkFDZDtvQkFDQTRCLE9BQU81QixNQUFNO3dCQUNUMEIsVUFBVTFCO29CQUNkO2dCQUNKLElBQUk2QixTQUFTLENBQUNQO1lBQ2xCO1FBQ0o7SUFDSjtBQUNKO0FBRXNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQG1pZGl2aXovd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9AdHJwYytjbGllbnRAMTAuNDUuMl9AdHJwYytzZXJ2ZXJAMTAuNDUuMi9ub2RlX21vZHVsZXMvQHRycGMvY2xpZW50L2Rpc3QvbGlua3MvbG9nZ2VyTGluay5tanM/Zjg1NyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBvYnNlcnZhYmxlLCB0YXAgfSBmcm9tICdAdHJwYy9zZXJ2ZXIvb2JzZXJ2YWJsZSc7XG5cbi8vLyA8cmVmZXJlbmNlIGxpYj1cImRvbS5pdGVyYWJsZVwiIC8+XG5mdW5jdGlvbiBpc0Zvcm1EYXRhKHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiBGb3JtRGF0YSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgLy8gRm9ybURhdGEgaXMgbm90IHN1cHBvcnRlZFxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIEZvcm1EYXRhO1xufVxuY29uc3QgcGFsZXR0ZXMgPSB7XG4gICAgY3NzOiB7XG4gICAgICAgIHF1ZXJ5OiBbXG4gICAgICAgICAgICAnNzJlM2ZmJyxcbiAgICAgICAgICAgICczZmIwZDgnXG4gICAgICAgIF0sXG4gICAgICAgIG11dGF0aW9uOiBbXG4gICAgICAgICAgICAnYzVhM2ZjJyxcbiAgICAgICAgICAgICc5MDRkZmMnXG4gICAgICAgIF0sXG4gICAgICAgIHN1YnNjcmlwdGlvbjogW1xuICAgICAgICAgICAgJ2ZmNDllMScsXG4gICAgICAgICAgICAnZDgzZmJlJ1xuICAgICAgICBdXG4gICAgfSxcbiAgICBhbnNpOiB7XG4gICAgICAgIHJlZ3VsYXI6IHtcbiAgICAgICAgICAgIC8vIEN5YW4gYmFja2dyb3VuZCwgYmxhY2sgYW5kIHdoaXRlIHRleHQgcmVzcGVjdGl2ZWx5XG4gICAgICAgICAgICBxdWVyeTogW1xuICAgICAgICAgICAgICAgICdcXHgxYlszMDs0Nm0nLFxuICAgICAgICAgICAgICAgICdcXHgxYls5Nzs0Nm0nXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgLy8gTWFnZW50YSBiYWNrZ3JvdW5kLCBibGFjayBhbmQgd2hpdGUgdGV4dCByZXNwZWN0aXZlbHlcbiAgICAgICAgICAgIG11dGF0aW9uOiBbXG4gICAgICAgICAgICAgICAgJ1xceDFiWzMwOzQ1bScsXG4gICAgICAgICAgICAgICAgJ1xceDFiWzk3OzQ1bSdcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAvLyBHcmVlbiBiYWNrZ3JvdW5kLCBibGFjayBhbmQgd2hpdGUgdGV4dCByZXNwZWN0aXZlbHlcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbjogW1xuICAgICAgICAgICAgICAgICdcXHgxYlszMDs0Mm0nLFxuICAgICAgICAgICAgICAgICdcXHgxYls5Nzs0Mm0nXG4gICAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIGJvbGQ6IHtcbiAgICAgICAgICAgIHF1ZXJ5OiBbXG4gICAgICAgICAgICAgICAgJ1xceDFiWzE7MzA7NDZtJyxcbiAgICAgICAgICAgICAgICAnXFx4MWJbMTs5Nzs0Nm0nXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgbXV0YXRpb246IFtcbiAgICAgICAgICAgICAgICAnXFx4MWJbMTszMDs0NW0nLFxuICAgICAgICAgICAgICAgICdcXHgxYlsxOzk3OzQ1bSdcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBzdWJzY3JpcHRpb246IFtcbiAgICAgICAgICAgICAgICAnXFx4MWJbMTszMDs0Mm0nLFxuICAgICAgICAgICAgICAgICdcXHgxYlsxOzk3OzQybSdcbiAgICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgIH1cbn07XG5mdW5jdGlvbiBjb25zdHJ1Y3RQYXJ0c0FuZEFyZ3Mob3B0cykge1xuICAgIGNvbnN0IHsgZGlyZWN0aW9uICwgdHlwZSAsIHBhdGggLCBpZCAsIGlucHV0ICB9ID0gb3B0cztcbiAgICBjb25zdCBwYXJ0cyA9IFtdO1xuICAgIGNvbnN0IGFyZ3MgPSBbXTtcbiAgICBpZiAob3B0cy5jb2xvck1vZGUgPT09ICdhbnNpJykge1xuICAgICAgICBjb25zdCBbbGlnaHRSZWd1bGFyLCBkYXJrUmVndWxhcl0gPSBwYWxldHRlcy5hbnNpLnJlZ3VsYXJbdHlwZV07XG4gICAgICAgIGNvbnN0IFtsaWdodEJvbGQsIGRhcmtCb2xkXSA9IHBhbGV0dGVzLmFuc2kuYm9sZFt0eXBlXTtcbiAgICAgICAgY29uc3QgcmVzZXQgPSAnXFx4MWJbMG0nO1xuICAgICAgICBwYXJ0cy5wdXNoKGRpcmVjdGlvbiA9PT0gJ3VwJyA/IGxpZ2h0UmVndWxhciA6IGRhcmtSZWd1bGFyLCBkaXJlY3Rpb24gPT09ICd1cCcgPyAnPj4nIDogJzw8JywgdHlwZSwgZGlyZWN0aW9uID09PSAndXAnID8gbGlnaHRCb2xkIDogZGFya0JvbGQsIGAjJHtpZH1gLCBwYXRoLCByZXNldCk7XG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICd1cCcpIHtcbiAgICAgICAgICAgIGFyZ3MucHVzaCh7XG4gICAgICAgICAgICAgICAgaW5wdXQ6IG9wdHMuaW5wdXRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXJncy5wdXNoKHtcbiAgICAgICAgICAgICAgICBpbnB1dDogb3B0cy5pbnB1dCxcbiAgICAgICAgICAgICAgICAvLyBzdHJpcCBjb250ZXh0IGZyb20gcmVzdWx0IGNhdXNlIGl0J3MgdG9vIG5vaXN5IGluIHRlcm1pbmFsIHdpaHRvdXQgY29sbGFwc2UgbW9kZVxuICAgICAgICAgICAgICAgIHJlc3VsdDogJ3Jlc3VsdCcgaW4gb3B0cy5yZXN1bHQgPyBvcHRzLnJlc3VsdC5yZXN1bHQgOiBvcHRzLnJlc3VsdCxcbiAgICAgICAgICAgICAgICBlbGFwc2VkTXM6IG9wdHMuZWxhcHNlZE1zXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcGFydHMsXG4gICAgICAgICAgICBhcmdzXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IFtsaWdodCwgZGFya10gPSBwYWxldHRlcy5jc3NbdHlwZV07XG4gICAgY29uc3QgY3NzID0gYFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMke2RpcmVjdGlvbiA9PT0gJ3VwJyA/IGxpZ2h0IDogZGFya307IFxuICAgIGNvbG9yOiAke2RpcmVjdGlvbiA9PT0gJ3VwJyA/ICdibGFjaycgOiAnd2hpdGUnfTtcbiAgICBwYWRkaW5nOiAycHg7XG4gIGA7XG4gICAgcGFydHMucHVzaCgnJWMnLCBkaXJlY3Rpb24gPT09ICd1cCcgPyAnPj4nIDogJzw8JywgdHlwZSwgYCMke2lkfWAsIGAlYyR7cGF0aH0lY2AsICclTycpO1xuICAgIGFyZ3MucHVzaChjc3MsIGAke2Nzc307IGZvbnQtd2VpZ2h0OiBib2xkO2AsIGAke2Nzc307IGZvbnQtd2VpZ2h0OiBub3JtYWw7YCk7XG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3VwJykge1xuICAgICAgICBhcmdzLnB1c2goe1xuICAgICAgICAgICAgaW5wdXQsXG4gICAgICAgICAgICBjb250ZXh0OiBvcHRzLmNvbnRleHRcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYXJncy5wdXNoKHtcbiAgICAgICAgICAgIGlucHV0LFxuICAgICAgICAgICAgcmVzdWx0OiBvcHRzLnJlc3VsdCxcbiAgICAgICAgICAgIGVsYXBzZWRNczogb3B0cy5lbGFwc2VkTXMsXG4gICAgICAgICAgICBjb250ZXh0OiBvcHRzLmNvbnRleHRcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHBhcnRzLFxuICAgICAgICBhcmdzXG4gICAgfTtcbn1cbi8vIG1heWJlIHRoaXMgc2hvdWxkIGJlIG1vdmVkIHRvIGl0J3Mgb3duIHBhY2thZ2VcbmNvbnN0IGRlZmF1bHRMb2dnZXIgPSAoeyBjID1jb25zb2xlICwgY29sb3JNb2RlID0nY3NzJyAgfSk9Pihwcm9wcyk9PntcbiAgICAgICAgY29uc3QgcmF3SW5wdXQgPSBwcm9wcy5pbnB1dDtcbiAgICAgICAgY29uc3QgaW5wdXQgPSBpc0Zvcm1EYXRhKHJhd0lucHV0KSA/IE9iamVjdC5mcm9tRW50cmllcyhyYXdJbnB1dCkgOiByYXdJbnB1dDtcbiAgICAgICAgY29uc3QgeyBwYXJ0cyAsIGFyZ3MgIH0gPSBjb25zdHJ1Y3RQYXJ0c0FuZEFyZ3Moe1xuICAgICAgICAgICAgLi4ucHJvcHMsXG4gICAgICAgICAgICBjb2xvck1vZGUsXG4gICAgICAgICAgICBpbnB1dFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgZm4gPSBwcm9wcy5kaXJlY3Rpb24gPT09ICdkb3duJyAmJiBwcm9wcy5yZXN1bHQgJiYgKHByb3BzLnJlc3VsdCBpbnN0YW5jZW9mIEVycm9yIHx8ICdlcnJvcicgaW4gcHJvcHMucmVzdWx0LnJlc3VsdCkgPyAnZXJyb3InIDogJ2xvZyc7XG4gICAgICAgIGNbZm5dLmFwcGx5KG51bGwsIFtcbiAgICAgICAgICAgIHBhcnRzLmpvaW4oJyAnKVxuICAgICAgICBdLmNvbmNhdChhcmdzKSk7XG4gICAgfTtcbi8qKlxuICogQHNlZSBodHRwczovL3RycGMuaW8vZG9jcy9jbGllbnQvbGlua3MvbG9nZ2VyTGlua1xuICovIGZ1bmN0aW9uIGxvZ2dlckxpbmsob3B0cyA9IHt9KSB7XG4gICAgY29uc3QgeyBlbmFibGVkID0oKT0+dHJ1ZSAgfSA9IG9wdHM7XG4gICAgY29uc3QgY29sb3JNb2RlID0gb3B0cy5jb2xvck1vZGUgPz8gKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnID8gJ2Fuc2knIDogJ2NzcycpO1xuICAgIGNvbnN0IHsgbG9nZ2VyID1kZWZhdWx0TG9nZ2VyKHtcbiAgICAgICAgYzogb3B0cy5jb25zb2xlLFxuICAgICAgICBjb2xvck1vZGVcbiAgICB9KSAgfSA9IG9wdHM7XG4gICAgcmV0dXJuICgpPT57XG4gICAgICAgIHJldHVybiAoeyBvcCAsIG5leHQgIH0pPT57XG4gICAgICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZSgob2JzZXJ2ZXIpPT57XG4gICAgICAgICAgICAgICAgLy8gLT5cbiAgICAgICAgICAgICAgICBlbmFibGVkKHtcbiAgICAgICAgICAgICAgICAgICAgLi4ub3AsXG4gICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbjogJ3VwJ1xuICAgICAgICAgICAgICAgIH0pICYmIGxvZ2dlcih7XG4gICAgICAgICAgICAgICAgICAgIC4uLm9wLFxuICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb246ICd1cCdcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXF1ZXN0U3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBsb2dSZXN1bHQocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVsYXBzZWRNcyA9IERhdGUubm93KCkgLSByZXF1ZXN0U3RhcnRUaW1lO1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLm9wLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uOiAnZG93bicsXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRcbiAgICAgICAgICAgICAgICAgICAgfSkgJiYgbG9nZ2VyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLm9wLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uOiAnZG93bicsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGFwc2VkTXMsXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBuZXh0KG9wKS5waXBlKHRhcCh7XG4gICAgICAgICAgICAgICAgICAgIG5leHQgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nUmVzdWx0KHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGVycm9yIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ1Jlc3VsdChyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkpLnN1YnNjcmliZShvYnNlcnZlcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICB9O1xufVxuXG5leHBvcnQgeyBsb2dnZXJMaW5rIH07XG4iXSwibmFtZXMiOlsib2JzZXJ2YWJsZSIsInRhcCIsImlzRm9ybURhdGEiLCJ2YWx1ZSIsIkZvcm1EYXRhIiwicGFsZXR0ZXMiLCJjc3MiLCJxdWVyeSIsIm11dGF0aW9uIiwic3Vic2NyaXB0aW9uIiwiYW5zaSIsInJlZ3VsYXIiLCJib2xkIiwiY29uc3RydWN0UGFydHNBbmRBcmdzIiwib3B0cyIsImRpcmVjdGlvbiIsInR5cGUiLCJwYXRoIiwiaWQiLCJpbnB1dCIsInBhcnRzIiwiYXJncyIsImNvbG9yTW9kZSIsImxpZ2h0UmVndWxhciIsImRhcmtSZWd1bGFyIiwibGlnaHRCb2xkIiwiZGFya0JvbGQiLCJyZXNldCIsInB1c2giLCJyZXN1bHQiLCJlbGFwc2VkTXMiLCJsaWdodCIsImRhcmsiLCJjb250ZXh0IiwiZGVmYXVsdExvZ2dlciIsImMiLCJjb25zb2xlIiwicHJvcHMiLCJyYXdJbnB1dCIsIk9iamVjdCIsImZyb21FbnRyaWVzIiwiZm4iLCJFcnJvciIsImFwcGx5Iiwiam9pbiIsImNvbmNhdCIsImxvZ2dlckxpbmsiLCJlbmFibGVkIiwibG9nZ2VyIiwib3AiLCJuZXh0Iiwib2JzZXJ2ZXIiLCJyZXF1ZXN0U3RhcnRUaW1lIiwiRGF0ZSIsIm5vdyIsImxvZ1Jlc3VsdCIsInBpcGUiLCJlcnJvciIsInN1YnNjcmliZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/links/loggerLink.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/links/wsLink.mjs":
/*!**************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/links/wsLink.mjs ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createWSClient: () => (/* binding */ createWSClient),\n/* harmony export */   wsLink: () => (/* binding */ wsLink)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/observable */ \"(ssr)/../../node_modules/.pnpm/@trpc+server@10.45.2/node_modules/@trpc/server/dist/observable/index.mjs\");\n/* harmony import */ var _transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../transformResult-ace864b8.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/transformResult-ace864b8.mjs\");\n/* harmony import */ var _TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../TRPCClientError-38f9a32a.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/TRPCClientError-38f9a32a.mjs\");\n/* harmony import */ var _trpc_server_shared__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @trpc/server/shared */ \"(ssr)/../../node_modules/.pnpm/@trpc+server@10.45.2/node_modules/@trpc/server/dist/shared/index.mjs\");\n\n\n\n\n/* istanbul ignore next -- @preserve */ const retryDelay = (attemptIndex)=>attemptIndex === 0 ? 0 : Math.min(1000 * 2 ** attemptIndex, 30000);\nfunction createWSClient(opts) {\n    const { url, WebSocket: WebSocketImpl = WebSocket, retryDelayMs: retryDelayFn = retryDelay, onOpen, onClose } = opts;\n    /* istanbul ignore next -- @preserve */ if (!WebSocketImpl) {\n        throw new Error(\"No WebSocket implementation found - you probably don't want to use this on the server, but if you do you need to pass a `WebSocket`-ponyfill\");\n    }\n    /**\n   * outgoing messages buffer whilst not open\n   */ let outgoing = [];\n    const pendingRequests = Object.create(null);\n    let connectAttempt = 0;\n    let dispatchTimer = null;\n    let connectTimer = null;\n    let activeConnection = createWS();\n    let state = \"connecting\";\n    /**\n   * tries to send the list of messages\n   */ function dispatch() {\n        if (state !== \"open\" || dispatchTimer) {\n            return;\n        }\n        dispatchTimer = setTimeout(()=>{\n            dispatchTimer = null;\n            if (outgoing.length === 1) {\n                // single send\n                activeConnection.send(JSON.stringify(outgoing.pop()));\n            } else {\n                // batch send\n                activeConnection.send(JSON.stringify(outgoing));\n            }\n            // clear\n            outgoing = [];\n        });\n    }\n    function tryReconnect() {\n        if (connectTimer !== null || state === \"closed\") {\n            return;\n        }\n        const timeout = retryDelayFn(connectAttempt++);\n        reconnectInMs(timeout);\n    }\n    function reconnect() {\n        state = \"connecting\";\n        const oldConnection = activeConnection;\n        activeConnection = createWS();\n        closeIfNoPending(oldConnection);\n    }\n    function reconnectInMs(ms) {\n        if (connectTimer) {\n            return;\n        }\n        state = \"connecting\";\n        connectTimer = setTimeout(reconnect, ms);\n    }\n    function closeIfNoPending(conn) {\n        // disconnect as soon as there are are no pending result\n        const hasPendingRequests = Object.values(pendingRequests).some((p)=>p.ws === conn);\n        if (!hasPendingRequests) {\n            conn.close();\n        }\n    }\n    function closeActiveSubscriptions() {\n        Object.values(pendingRequests).forEach((req)=>{\n            if (req.type === \"subscription\") {\n                req.callbacks.complete();\n            }\n        });\n    }\n    function resumeSubscriptionOnReconnect(req) {\n        if (outgoing.some((r)=>r.id === req.op.id)) {\n            return;\n        }\n        request(req.op, req.callbacks);\n    }\n    function createWS() {\n        const urlString = typeof url === \"function\" ? url() : url;\n        const conn = new WebSocketImpl(urlString);\n        clearTimeout(connectTimer);\n        connectTimer = null;\n        conn.addEventListener(\"open\", ()=>{\n            /* istanbul ignore next -- @preserve */ if (conn !== activeConnection) {\n                return;\n            }\n            connectAttempt = 0;\n            state = \"open\";\n            onOpen?.();\n            dispatch();\n        });\n        conn.addEventListener(\"error\", ()=>{\n            if (conn === activeConnection) {\n                tryReconnect();\n            }\n        });\n        const handleIncomingRequest = (req)=>{\n            if (req.method === \"reconnect\" && conn === activeConnection) {\n                if (state === \"open\") {\n                    onClose?.();\n                }\n                reconnect();\n                // notify subscribers\n                for (const pendingReq of Object.values(pendingRequests)){\n                    if (pendingReq.type === \"subscription\") {\n                        resumeSubscriptionOnReconnect(pendingReq);\n                    }\n                }\n            }\n        };\n        const handleIncomingResponse = (data)=>{\n            const req = data.id !== null && pendingRequests[data.id];\n            if (!req) {\n                // do something?\n                return;\n            }\n            req.callbacks.next?.(data);\n            if (req.ws !== activeConnection && conn === activeConnection) {\n                const oldWs = req.ws;\n                // gracefully replace old connection with this\n                req.ws = activeConnection;\n                closeIfNoPending(oldWs);\n            }\n            if (\"result\" in data && data.result.type === \"stopped\" && conn === activeConnection) {\n                req.callbacks.complete();\n            }\n        };\n        conn.addEventListener(\"message\", ({ data })=>{\n            const msg = JSON.parse(data);\n            if (\"method\" in msg) {\n                handleIncomingRequest(msg);\n            } else {\n                handleIncomingResponse(msg);\n            }\n            if (conn !== activeConnection || state === \"closed\") {\n                // when receiving a message, we close old connection that has no pending requests\n                closeIfNoPending(conn);\n            }\n        });\n        conn.addEventListener(\"close\", ({ code })=>{\n            if (state === \"open\") {\n                onClose?.({\n                    code\n                });\n            }\n            if (activeConnection === conn) {\n                // connection might have been replaced already\n                tryReconnect();\n            }\n            for (const [key, req] of Object.entries(pendingRequests)){\n                if (req.ws !== conn) {\n                    continue;\n                }\n                if (state === \"closed\") {\n                    // If the connection was closed, we just call `complete()` on the request\n                    delete pendingRequests[key];\n                    req.callbacks.complete?.();\n                    continue;\n                }\n                // The connection was closed either unexpectedly or because of a reconnect\n                if (req.type === \"subscription\") {\n                    // Subscriptions will resume after we've reconnected\n                    resumeSubscriptionOnReconnect(req);\n                } else {\n                    // Queries and mutations will error if interrupted\n                    delete pendingRequests[key];\n                    req.callbacks.error?.(_TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(new TRPCWebSocketClosedError(\"WebSocket closed prematurely\")));\n                }\n            }\n        });\n        return conn;\n    }\n    function request(op, callbacks) {\n        const { type, input, path, id } = op;\n        const envelope = {\n            id,\n            method: type,\n            params: {\n                input,\n                path\n            }\n        };\n        pendingRequests[id] = {\n            ws: activeConnection,\n            type,\n            callbacks,\n            op\n        };\n        // enqueue message\n        outgoing.push(envelope);\n        dispatch();\n        return ()=>{\n            const callbacks = pendingRequests[id]?.callbacks;\n            delete pendingRequests[id];\n            outgoing = outgoing.filter((msg)=>msg.id !== id);\n            callbacks?.complete?.();\n            if (activeConnection.readyState === WebSocketImpl.OPEN && op.type === \"subscription\") {\n                outgoing.push({\n                    id,\n                    method: \"subscription.stop\"\n                });\n                dispatch();\n            }\n        };\n    }\n    return {\n        close: ()=>{\n            state = \"closed\";\n            onClose?.();\n            closeActiveSubscriptions();\n            closeIfNoPending(activeConnection);\n            clearTimeout(connectTimer);\n            connectTimer = null;\n        },\n        request,\n        getConnection () {\n            return activeConnection;\n        }\n    };\n}\nclass TRPCWebSocketClosedError extends Error {\n    constructor(message){\n        super(message);\n        this.name = \"TRPCWebSocketClosedError\";\n        Object.setPrototypeOf(this, TRPCWebSocketClosedError.prototype);\n    }\n}\n/**\n * @see https://trpc.io/docs/client/links/wsLink\n */ function wsLink(opts) {\n    return (runtime)=>{\n        const { client } = opts;\n        return ({ op })=>{\n            return (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observable)((observer)=>{\n                const { type, path, id, context } = op;\n                const input = runtime.transformer.serialize(op.input);\n                const unsub = client.request({\n                    type,\n                    path,\n                    input,\n                    id,\n                    context\n                }, {\n                    error (err) {\n                        observer.error(err);\n                        unsub();\n                    },\n                    complete () {\n                        observer.complete();\n                    },\n                    next (message) {\n                        const transformed = (0,_transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__.t)(message, runtime);\n                        if (!transformed.ok) {\n                            observer.error(_TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(transformed.error));\n                            return;\n                        }\n                        observer.next({\n                            result: transformed.result\n                        });\n                        if (op.type !== \"subscription\") {\n                            // if it isn't a subscription we don't care about next response\n                            unsub();\n                            observer.complete();\n                        }\n                    }\n                });\n                return ()=>{\n                    unsub();\n                };\n            });\n        };\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/links/wsLink.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/splitLink-4c75f7be.mjs":
/*!********************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/splitLink-4c75f7be.mjs ***!
  \********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ createChain),\n/* harmony export */   s: () => (/* binding */ splitLink)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/observable */ \"(ssr)/../../node_modules/.pnpm/@trpc+server@10.45.2/node_modules/@trpc/server/dist/observable/index.mjs\");\n\n/** @internal */ function createChain(opts) {\n    return (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observable)((observer)=>{\n        function execute(index = 0, op = opts.op) {\n            const next = opts.links[index];\n            if (!next) {\n                throw new Error(\"No more links to execute - did you forget to add an ending link?\");\n            }\n            const subscription = next({\n                op,\n                next (nextOp) {\n                    const nextObserver = execute(index + 1, nextOp);\n                    return nextObserver;\n                }\n            });\n            return subscription;\n        }\n        const obs$ = execute();\n        return obs$.subscribe(observer);\n    });\n}\nfunction asArray(value) {\n    return Array.isArray(value) ? value : [\n        value\n    ];\n}\nfunction splitLink(opts) {\n    return (runtime)=>{\n        const yes = asArray(opts.true).map((link)=>link(runtime));\n        const no = asArray(opts.false).map((link)=>link(runtime));\n        return (props)=>{\n            return (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observable)((observer)=>{\n                const links = opts.condition(props.op) ? yes : no;\n                return createChain({\n                    op: props.op,\n                    links\n                }).subscribe(observer);\n            });\n        };\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0cnBjK2NsaWVudEAxMC40NS4yX0B0cnBjK3NlcnZlckAxMC40NS4yL25vZGVfbW9kdWxlcy9AdHJwYy9jbGllbnQvZGlzdC9zcGxpdExpbmstNGM3NWY3YmUubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFxRDtBQUVyRCxjQUFjLEdBQUcsU0FBU0MsWUFBWUMsSUFBSTtJQUN0QyxPQUFPRixtRUFBVUEsQ0FBQyxDQUFDRztRQUNmLFNBQVNDLFFBQVFDLFFBQVEsQ0FBQyxFQUFFQyxLQUFLSixLQUFLSSxFQUFFO1lBQ3BDLE1BQU1DLE9BQU9MLEtBQUtNLEtBQUssQ0FBQ0gsTUFBTTtZQUM5QixJQUFJLENBQUNFLE1BQU07Z0JBQ1AsTUFBTSxJQUFJRSxNQUFNO1lBQ3BCO1lBQ0EsTUFBTUMsZUFBZUgsS0FBSztnQkFDdEJEO2dCQUNBQyxNQUFNSSxNQUFNO29CQUNSLE1BQU1DLGVBQWVSLFFBQVFDLFFBQVEsR0FBR007b0JBQ3hDLE9BQU9DO2dCQUNYO1lBQ0o7WUFDQSxPQUFPRjtRQUNYO1FBQ0EsTUFBTUcsT0FBT1Q7UUFDYixPQUFPUyxLQUFLQyxTQUFTLENBQUNYO0lBQzFCO0FBQ0o7QUFFQSxTQUFTWSxRQUFRQyxLQUFLO0lBQ2xCLE9BQU9DLE1BQU1DLE9BQU8sQ0FBQ0YsU0FBU0EsUUFBUTtRQUNsQ0E7S0FDSDtBQUNMO0FBQ0EsU0FBU0csVUFBVWpCLElBQUk7SUFDbkIsT0FBTyxDQUFDa0I7UUFDSixNQUFNQyxNQUFNTixRQUFRYixLQUFLb0IsSUFBSSxFQUFFQyxHQUFHLENBQUMsQ0FBQ0MsT0FBT0EsS0FBS0o7UUFDaEQsTUFBTUssS0FBS1YsUUFBUWIsS0FBS3dCLEtBQUssRUFBRUgsR0FBRyxDQUFDLENBQUNDLE9BQU9BLEtBQUtKO1FBQ2hELE9BQU8sQ0FBQ087WUFDSixPQUFPM0IsbUVBQVVBLENBQUMsQ0FBQ0c7Z0JBQ2YsTUFBTUssUUFBUU4sS0FBSzBCLFNBQVMsQ0FBQ0QsTUFBTXJCLEVBQUUsSUFBSWUsTUFBTUk7Z0JBQy9DLE9BQU94QixZQUFZO29CQUNmSyxJQUFJcUIsTUFBTXJCLEVBQUU7b0JBQ1pFO2dCQUNKLEdBQUdNLFNBQVMsQ0FBQ1g7WUFDakI7UUFDSjtJQUNKO0FBQ0o7QUFFNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AbWlkaXZpei93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0cnBjK2NsaWVudEAxMC40NS4yX0B0cnBjK3NlcnZlckAxMC40NS4yL25vZGVfbW9kdWxlcy9AdHJwYy9jbGllbnQvZGlzdC9zcGxpdExpbmstNGM3NWY3YmUubWpzPzU2YjQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgb2JzZXJ2YWJsZSB9IGZyb20gJ0B0cnBjL3NlcnZlci9vYnNlcnZhYmxlJztcblxuLyoqIEBpbnRlcm5hbCAqLyBmdW5jdGlvbiBjcmVhdGVDaGFpbihvcHRzKSB7XG4gICAgcmV0dXJuIG9ic2VydmFibGUoKG9ic2VydmVyKT0+e1xuICAgICAgICBmdW5jdGlvbiBleGVjdXRlKGluZGV4ID0gMCwgb3AgPSBvcHRzLm9wKSB7XG4gICAgICAgICAgICBjb25zdCBuZXh0ID0gb3B0cy5saW5rc1tpbmRleF07XG4gICAgICAgICAgICBpZiAoIW5leHQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIG1vcmUgbGlua3MgdG8gZXhlY3V0ZSAtIGRpZCB5b3UgZm9yZ2V0IHRvIGFkZCBhbiBlbmRpbmcgbGluaz8nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IG5leHQoe1xuICAgICAgICAgICAgICAgIG9wLFxuICAgICAgICAgICAgICAgIG5leHQgKG5leHRPcCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXh0T2JzZXJ2ZXIgPSBleGVjdXRlKGluZGV4ICsgMSwgbmV4dE9wKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5leHRPYnNlcnZlcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb2JzJCA9IGV4ZWN1dGUoKTtcbiAgICAgICAgcmV0dXJuIG9icyQuc3Vic2NyaWJlKG9ic2VydmVyKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gYXNBcnJheSh2YWx1ZSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW1xuICAgICAgICB2YWx1ZVxuICAgIF07XG59XG5mdW5jdGlvbiBzcGxpdExpbmsob3B0cykge1xuICAgIHJldHVybiAocnVudGltZSk9PntcbiAgICAgICAgY29uc3QgeWVzID0gYXNBcnJheShvcHRzLnRydWUpLm1hcCgobGluayk9PmxpbmsocnVudGltZSkpO1xuICAgICAgICBjb25zdCBubyA9IGFzQXJyYXkob3B0cy5mYWxzZSkubWFwKChsaW5rKT0+bGluayhydW50aW1lKSk7XG4gICAgICAgIHJldHVybiAocHJvcHMpPT57XG4gICAgICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZSgob2JzZXJ2ZXIpPT57XG4gICAgICAgICAgICAgICAgY29uc3QgbGlua3MgPSBvcHRzLmNvbmRpdGlvbihwcm9wcy5vcCkgPyB5ZXMgOiBubztcbiAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlQ2hhaW4oe1xuICAgICAgICAgICAgICAgICAgICBvcDogcHJvcHMub3AsXG4gICAgICAgICAgICAgICAgICAgIGxpbmtzXG4gICAgICAgICAgICAgICAgfSkuc3Vic2NyaWJlKG9ic2VydmVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgIH07XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUNoYWluIGFzIGMsIHNwbGl0TGluayBhcyBzIH07XG4iXSwibmFtZXMiOlsib2JzZXJ2YWJsZSIsImNyZWF0ZUNoYWluIiwib3B0cyIsIm9ic2VydmVyIiwiZXhlY3V0ZSIsImluZGV4Iiwib3AiLCJuZXh0IiwibGlua3MiLCJFcnJvciIsInN1YnNjcmlwdGlvbiIsIm5leHRPcCIsIm5leHRPYnNlcnZlciIsIm9icyQiLCJzdWJzY3JpYmUiLCJhc0FycmF5IiwidmFsdWUiLCJBcnJheSIsImlzQXJyYXkiLCJzcGxpdExpbmsiLCJydW50aW1lIiwieWVzIiwidHJ1ZSIsIm1hcCIsImxpbmsiLCJubyIsImZhbHNlIiwicHJvcHMiLCJjb25kaXRpb24iLCJjIiwicyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/splitLink-4c75f7be.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/transformResult-ace864b8.mjs":
/*!**************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/transformResult-ace864b8.mjs ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   i: () => (/* binding */ isObject),\n/* harmony export */   t: () => (/* binding */ transformResult)\n/* harmony export */ });\nfunction isObject(value) {\n    // check that value is object\n    return !!value && !Array.isArray(value) && typeof value === \"object\";\n}\n// FIXME:\n// - the generics here are probably unnecessary\n// - the RPC-spec could probably be simplified to combine HTTP + WS\n/** @internal */ function transformResultInner(response, runtime) {\n    if (\"error\" in response) {\n        const error = runtime.transformer.deserialize(response.error);\n        return {\n            ok: false,\n            error: {\n                ...response,\n                error\n            }\n        };\n    }\n    const result = {\n        ...response.result,\n        ...(!response.result.type || response.result.type === \"data\") && {\n            type: \"data\",\n            data: runtime.transformer.deserialize(response.result.data)\n        }\n    };\n    return {\n        ok: true,\n        result\n    };\n}\nclass TransformResultError extends Error {\n    constructor(){\n        super(\"Unable to transform response from server\");\n    }\n}\n/**\n * Transforms and validates that the result is a valid TRPCResponse\n * @internal\n */ function transformResult(response, runtime) {\n    let result;\n    try {\n        // Use the data transformers on the JSON-response\n        result = transformResultInner(response, runtime);\n    } catch (err) {\n        throw new TransformResultError();\n    }\n    // check that output of the transformers is a valid TRPCResponse\n    if (!result.ok && (!isObject(result.error.error) || typeof result.error.error.code !== \"number\")) {\n        throw new TransformResultError();\n    }\n    if (result.ok && !isObject(result.result)) {\n        throw new TransformResultError();\n    }\n    return result;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0cnBjK2NsaWVudEAxMC40NS4yX0B0cnBjK3NlcnZlckAxMC40NS4yL25vZGVfbW9kdWxlcy9AdHJwYy9jbGllbnQvZGlzdC90cmFuc2Zvcm1SZXN1bHQtYWNlODY0YjgubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsU0FBU0EsU0FBU0MsS0FBSztJQUNuQiw2QkFBNkI7SUFDN0IsT0FBTyxDQUFDLENBQUNBLFNBQVMsQ0FBQ0MsTUFBTUMsT0FBTyxDQUFDRixVQUFVLE9BQU9BLFVBQVU7QUFDaEU7QUFFQSxTQUFTO0FBQ1QsK0NBQStDO0FBQy9DLG1FQUFtRTtBQUNuRSxjQUFjLEdBQUcsU0FBU0cscUJBQXFCQyxRQUFRLEVBQUVDLE9BQU87SUFDNUQsSUFBSSxXQUFXRCxVQUFVO1FBQ3JCLE1BQU1FLFFBQVFELFFBQVFFLFdBQVcsQ0FBQ0MsV0FBVyxDQUFDSixTQUFTRSxLQUFLO1FBQzVELE9BQU87WUFDSEcsSUFBSTtZQUNKSCxPQUFPO2dCQUNILEdBQUdGLFFBQVE7Z0JBQ1hFO1lBQ0o7UUFDSjtJQUNKO0lBQ0EsTUFBTUksU0FBUztRQUNYLEdBQUdOLFNBQVNNLE1BQU07UUFDbEIsR0FBRyxDQUFDLENBQUNOLFNBQVNNLE1BQU0sQ0FBQ0MsSUFBSSxJQUFJUCxTQUFTTSxNQUFNLENBQUNDLElBQUksS0FBSyxNQUFLLEtBQU07WUFDN0RBLE1BQU07WUFDTkMsTUFBTVAsUUFBUUUsV0FBVyxDQUFDQyxXQUFXLENBQUNKLFNBQVNNLE1BQU0sQ0FBQ0UsSUFBSTtRQUM5RCxDQUFDO0lBQ0w7SUFDQSxPQUFPO1FBQ0hILElBQUk7UUFDSkM7SUFDSjtBQUNKO0FBQ0EsTUFBTUcsNkJBQTZCQztJQUMvQkMsYUFBYTtRQUNULEtBQUssQ0FBQztJQUNWO0FBQ0o7QUFDQTs7O0NBR0MsR0FBRyxTQUFTQyxnQkFBZ0JaLFFBQVEsRUFBRUMsT0FBTztJQUMxQyxJQUFJSztJQUNKLElBQUk7UUFDQSxpREFBaUQ7UUFDakRBLFNBQVNQLHFCQUFxQkMsVUFBVUM7SUFDNUMsRUFBRSxPQUFPWSxLQUFLO1FBQ1YsTUFBTSxJQUFJSjtJQUNkO0lBQ0EsZ0VBQWdFO0lBQ2hFLElBQUksQ0FBQ0gsT0FBT0QsRUFBRSxJQUFLLEVBQUNWLFNBQVNXLE9BQU9KLEtBQUssQ0FBQ0EsS0FBSyxLQUFLLE9BQU9JLE9BQU9KLEtBQUssQ0FBQ0EsS0FBSyxDQUFDWSxJQUFJLEtBQUssUUFBTyxHQUFJO1FBQzlGLE1BQU0sSUFBSUw7SUFDZDtJQUNBLElBQUlILE9BQU9ELEVBQUUsSUFBSSxDQUFDVixTQUFTVyxPQUFPQSxNQUFNLEdBQUc7UUFDdkMsTUFBTSxJQUFJRztJQUNkO0lBQ0EsT0FBT0g7QUFDWDtBQUUrQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BtaWRpdml6L3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHRycGMrY2xpZW50QDEwLjQ1LjJfQHRycGMrc2VydmVyQDEwLjQ1LjIvbm9kZV9tb2R1bGVzL0B0cnBjL2NsaWVudC9kaXN0L3RyYW5zZm9ybVJlc3VsdC1hY2U4NjRiOC5tanM/NGE5ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICAgIC8vIGNoZWNrIHRoYXQgdmFsdWUgaXMgb2JqZWN0XG4gICAgcmV0dXJuICEhdmFsdWUgJiYgIUFycmF5LmlzQXJyYXkodmFsdWUpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCc7XG59XG5cbi8vIEZJWE1FOlxuLy8gLSB0aGUgZ2VuZXJpY3MgaGVyZSBhcmUgcHJvYmFibHkgdW5uZWNlc3Nhcnlcbi8vIC0gdGhlIFJQQy1zcGVjIGNvdWxkIHByb2JhYmx5IGJlIHNpbXBsaWZpZWQgdG8gY29tYmluZSBIVFRQICsgV1Ncbi8qKiBAaW50ZXJuYWwgKi8gZnVuY3Rpb24gdHJhbnNmb3JtUmVzdWx0SW5uZXIocmVzcG9uc2UsIHJ1bnRpbWUpIHtcbiAgICBpZiAoJ2Vycm9yJyBpbiByZXNwb25zZSkge1xuICAgICAgICBjb25zdCBlcnJvciA9IHJ1bnRpbWUudHJhbnNmb3JtZXIuZGVzZXJpYWxpemUocmVzcG9uc2UuZXJyb3IpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgb2s6IGZhbHNlLFxuICAgICAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICAgICAgICAuLi5yZXNwb25zZSxcbiAgICAgICAgICAgICAgICBlcnJvclxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICAgIC4uLnJlc3BvbnNlLnJlc3VsdCxcbiAgICAgICAgLi4uKCFyZXNwb25zZS5yZXN1bHQudHlwZSB8fCByZXNwb25zZS5yZXN1bHQudHlwZSA9PT0gJ2RhdGEnKSAmJiB7XG4gICAgICAgICAgICB0eXBlOiAnZGF0YScsXG4gICAgICAgICAgICBkYXRhOiBydW50aW1lLnRyYW5zZm9ybWVyLmRlc2VyaWFsaXplKHJlc3BvbnNlLnJlc3VsdC5kYXRhKVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAgcmVzdWx0XG4gICAgfTtcbn1cbmNsYXNzIFRyYW5zZm9ybVJlc3VsdEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgIHN1cGVyKCdVbmFibGUgdG8gdHJhbnNmb3JtIHJlc3BvbnNlIGZyb20gc2VydmVyJyk7XG4gICAgfVxufVxuLyoqXG4gKiBUcmFuc2Zvcm1zIGFuZCB2YWxpZGF0ZXMgdGhhdCB0aGUgcmVzdWx0IGlzIGEgdmFsaWQgVFJQQ1Jlc3BvbnNlXG4gKiBAaW50ZXJuYWxcbiAqLyBmdW5jdGlvbiB0cmFuc2Zvcm1SZXN1bHQocmVzcG9uc2UsIHJ1bnRpbWUpIHtcbiAgICBsZXQgcmVzdWx0O1xuICAgIHRyeSB7XG4gICAgICAgIC8vIFVzZSB0aGUgZGF0YSB0cmFuc2Zvcm1lcnMgb24gdGhlIEpTT04tcmVzcG9uc2VcbiAgICAgICAgcmVzdWx0ID0gdHJhbnNmb3JtUmVzdWx0SW5uZXIocmVzcG9uc2UsIHJ1bnRpbWUpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICB0aHJvdyBuZXcgVHJhbnNmb3JtUmVzdWx0RXJyb3IoKTtcbiAgICB9XG4gICAgLy8gY2hlY2sgdGhhdCBvdXRwdXQgb2YgdGhlIHRyYW5zZm9ybWVycyBpcyBhIHZhbGlkIFRSUENSZXNwb25zZVxuICAgIGlmICghcmVzdWx0Lm9rICYmICghaXNPYmplY3QocmVzdWx0LmVycm9yLmVycm9yKSB8fCB0eXBlb2YgcmVzdWx0LmVycm9yLmVycm9yLmNvZGUgIT09ICdudW1iZXInKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHJhbnNmb3JtUmVzdWx0RXJyb3IoKTtcbiAgICB9XG4gICAgaWYgKHJlc3VsdC5vayAmJiAhaXNPYmplY3QocmVzdWx0LnJlc3VsdCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFRyYW5zZm9ybVJlc3VsdEVycm9yKCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCB7IGlzT2JqZWN0IGFzIGksIHRyYW5zZm9ybVJlc3VsdCBhcyB0IH07XG4iXSwibmFtZXMiOlsiaXNPYmplY3QiLCJ2YWx1ZSIsIkFycmF5IiwiaXNBcnJheSIsInRyYW5zZm9ybVJlc3VsdElubmVyIiwicmVzcG9uc2UiLCJydW50aW1lIiwiZXJyb3IiLCJ0cmFuc2Zvcm1lciIsImRlc2VyaWFsaXplIiwib2siLCJyZXN1bHQiLCJ0eXBlIiwiZGF0YSIsIlRyYW5zZm9ybVJlc3VsdEVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsInRyYW5zZm9ybVJlc3VsdCIsImVyciIsImNvZGUiLCJpIiwidCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/transformResult-ace864b8.mjs\n");

/***/ })

};
;