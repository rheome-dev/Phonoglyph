"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/meyda@5.6.3_rollup@4.44.1";
exports.ids = ["vendor-chunks/meyda@5.6.3_rollup@4.44.1"];
exports.modules = {

/***/ "(ssr)/../../node_modules/.pnpm/meyda@5.6.3_rollup@4.44.1/node_modules/meyda/dist/node/main.js":
/*!***********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/meyda@5.6.3_rollup@4.44.1/node_modules/meyda/dist/node/main.js ***!
  \***********************************************************************************************/
/***/ ((module) => {

eval("\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ /* global Reflect, Promise */ function __spreadArray(to, from, pack) {\n    if (pack || arguments.length === 2) for(var i = 0, l = from.length, ar; i < l; i++){\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n}\nfunction blackman(size) {\n    var blackmanBuffer = new Float32Array(size);\n    var coeff1 = 2 * Math.PI / (size - 1);\n    var coeff2 = 2 * coeff1;\n    //According to http://uk.mathworks.com/help/signal/ref/blackman.html\n    //first half of the window\n    for(var i = 0; i < size / 2; i++){\n        blackmanBuffer[i] = 0.42 - 0.5 * Math.cos(i * coeff1) + 0.08 * Math.cos(i * coeff2);\n    }\n    //second half of the window\n    for(var i = Math.ceil(size / 2); i > 0; i--){\n        blackmanBuffer[size - i] = blackmanBuffer[i - 1];\n    }\n    return blackmanBuffer;\n}\nfunction sine(size) {\n    var coeff = Math.PI / (size - 1);\n    var sineBuffer = new Float32Array(size);\n    for(var i = 0; i < size; i++){\n        sineBuffer[i] = Math.sin(coeff * i);\n    }\n    return sineBuffer;\n}\nfunction hanning(size) {\n    var hanningBuffer = new Float32Array(size);\n    for(var i = 0; i < size; i++){\n        // According to the R documentation\n        // http://ugrad.stat.ubc.ca/R/library/e1071/html/hanning.window.html\n        hanningBuffer[i] = 0.5 - 0.5 * Math.cos(2 * Math.PI * i / (size - 1));\n    }\n    return hanningBuffer;\n}\nfunction hamming(size) {\n    var hammingBuffer = new Float32Array(size);\n    for(var i = 0; i < size; i++){\n        //According to http://uk.mathworks.com/help/signal/ref/hamming.html\n        hammingBuffer[i] = 0.54 - 0.46 * Math.cos(2 * Math.PI * (i / size - 1));\n    }\n    return hammingBuffer;\n}\nvar windowing = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    blackman: blackman,\n    hamming: hamming,\n    hanning: hanning,\n    sine: sine\n});\nvar windows = {};\nfunction isPowerOfTwo(num) {\n    while(num % 2 === 0 && num > 1){\n        num /= 2;\n    }\n    return num === 1;\n}\nfunction pointwiseBufferMult(a, b) {\n    var c = [];\n    for(var i = 0; i < Math.min(a.length, b.length); i++){\n        c[i] = a[i] * b[i];\n    }\n    return c;\n}\nfunction applyWindow(signal, windowname) {\n    if (windowname !== \"rect\") {\n        if (windowname === \"\" || !windowname) windowname = \"hanning\";\n        if (!windows[windowname]) windows[windowname] = {};\n        if (!windows[windowname][signal.length]) {\n            try {\n                windows[windowname][signal.length] = windowing[windowname](signal.length);\n            } catch (e) {\n                throw new Error(\"Invalid windowing function\");\n            }\n        }\n        signal = pointwiseBufferMult(signal, windows[windowname][signal.length]);\n    }\n    return signal;\n}\nfunction createBarkScale(length, sampleRate, bufferSize) {\n    var barkScale = new Float32Array(length);\n    for(var i = 0; i < barkScale.length; i++){\n        barkScale[i] = i * sampleRate / bufferSize;\n        barkScale[i] = 13 * Math.atan(barkScale[i] / 1315.8) + 3.5 * Math.atan(Math.pow(barkScale[i] / 7518, 2));\n    }\n    return barkScale;\n}\nfunction arrayToTyped(t) {\n    // utility to convert arrays to typed F32 arrays\n    return Float32Array.from(t);\n}\nfunction _melToFreq(melValue) {\n    var freqValue = 700 * (Math.exp(melValue / 1125) - 1);\n    return freqValue;\n}\nfunction _freqToMel(freqValue) {\n    var melValue = 1125 * Math.log(1 + freqValue / 700);\n    return melValue;\n}\nfunction createMelFilterBank(numFilters, sampleRate, bufferSize) {\n    //the +2 is the upper and lower limits\n    var melValues = new Float32Array(numFilters + 2);\n    var melValuesInFreq = new Float32Array(numFilters + 2);\n    //Generate limits in Hz - from 0 to the nyquist.\n    var lowerLimitFreq = 0;\n    var upperLimitFreq = sampleRate / 2;\n    //Convert the limits to Mel\n    var lowerLimitMel = _freqToMel(lowerLimitFreq);\n    var upperLimitMel = _freqToMel(upperLimitFreq);\n    //Find the range\n    var range = upperLimitMel - lowerLimitMel;\n    //Find the range as part of the linear interpolation\n    var valueToAdd = range / (numFilters + 1);\n    var fftBinsOfFreq = new Array(numFilters + 2);\n    for(var i = 0; i < melValues.length; i++){\n        // Initialising the mel frequencies\n        // They're a linear interpolation between the lower and upper limits.\n        melValues[i] = i * valueToAdd;\n        // Convert back to Hz\n        melValuesInFreq[i] = _melToFreq(melValues[i]);\n        // Find the corresponding bins\n        fftBinsOfFreq[i] = Math.floor((bufferSize + 1) * melValuesInFreq[i] / sampleRate);\n    }\n    var filterBank = new Array(numFilters);\n    for(var j = 0; j < filterBank.length; j++){\n        // Create a two dimensional array of size numFilters * (buffersize/2)+1\n        // pre-populating the arrays with 0s.\n        filterBank[j] = new Array(bufferSize / 2 + 1).fill(0);\n        //creating the lower and upper slopes for each bin\n        for(var i = fftBinsOfFreq[j]; i < fftBinsOfFreq[j + 1]; i++){\n            filterBank[j][i] = (i - fftBinsOfFreq[j]) / (fftBinsOfFreq[j + 1] - fftBinsOfFreq[j]);\n        }\n        for(var i = fftBinsOfFreq[j + 1]; i < fftBinsOfFreq[j + 2]; i++){\n            filterBank[j][i] = (fftBinsOfFreq[j + 2] - i) / (fftBinsOfFreq[j + 2] - fftBinsOfFreq[j + 1]);\n        }\n    }\n    return filterBank;\n}\nfunction hzToOctaves(freq, A440) {\n    return Math.log2(16 * freq / A440);\n}\nfunction normalizeByColumn(a) {\n    var emptyRow = a[0].map(function() {\n        return 0;\n    });\n    var colDenominators = a.reduce(function(acc, row) {\n        row.forEach(function(cell, j) {\n            acc[j] += Math.pow(cell, 2);\n        });\n        return acc;\n    }, emptyRow).map(Math.sqrt);\n    return a.map(function(row, i) {\n        return row.map(function(v, j) {\n            return v / (colDenominators[j] || 1);\n        });\n    });\n}\nfunction createChromaFilterBank(numFilters, sampleRate, bufferSize, centerOctave, octaveWidth, baseC, A440) {\n    if (centerOctave === void 0) {\n        centerOctave = 5;\n    }\n    if (octaveWidth === void 0) {\n        octaveWidth = 2;\n    }\n    if (baseC === void 0) {\n        baseC = true;\n    }\n    if (A440 === void 0) {\n        A440 = 440;\n    }\n    var numOutputBins = Math.floor(bufferSize / 2) + 1;\n    var frequencyBins = new Array(bufferSize).fill(0).map(function(_, i) {\n        return numFilters * hzToOctaves(sampleRate * i / bufferSize, A440);\n    });\n    // Set a value for the 0 Hz bin that is 1.5 octaves below bin 1\n    // (so chroma is 50% rotated from bin 1, and bin width is broad)\n    frequencyBins[0] = frequencyBins[1] - 1.5 * numFilters;\n    var binWidthBins = frequencyBins.slice(1).map(function(v, i) {\n        return Math.max(v - frequencyBins[i]);\n    }, 1).concat([\n        1\n    ]);\n    var halfNumFilters = Math.round(numFilters / 2);\n    var filterPeaks = new Array(numFilters).fill(0).map(function(_, i) {\n        return frequencyBins.map(function(frq) {\n            return (10 * numFilters + halfNumFilters + frq - i) % numFilters - halfNumFilters;\n        });\n    });\n    var weights = filterPeaks.map(function(row, i) {\n        return row.map(function(_, j) {\n            return Math.exp(-0.5 * Math.pow(2 * filterPeaks[i][j] / binWidthBins[j], 2));\n        });\n    });\n    weights = normalizeByColumn(weights);\n    if (octaveWidth) {\n        var octaveWeights = frequencyBins.map(function(v) {\n            return Math.exp(-0.5 * Math.pow((v / numFilters - centerOctave) / octaveWidth, 2));\n        });\n        weights = weights.map(function(row) {\n            return row.map(function(cell, j) {\n                return cell * octaveWeights[j];\n            });\n        });\n    }\n    if (baseC) {\n        weights = __spreadArray(__spreadArray([], weights.slice(3), true), weights.slice(0, 3), true);\n    }\n    return weights.map(function(row) {\n        return row.slice(0, numOutputBins);\n    });\n}\nfunction frame(buffer, frameLength, hopLength) {\n    if (buffer.length < frameLength) {\n        throw new Error(\"Buffer is too short for frame length\");\n    }\n    if (hopLength < 1) {\n        throw new Error(\"Hop length cannot be less that 1\");\n    }\n    if (frameLength < 1) {\n        throw new Error(\"Frame length cannot be less that 1\");\n    }\n    var numFrames = 1 + Math.floor((buffer.length - frameLength) / hopLength);\n    return new Array(numFrames).fill(0).map(function(_, i) {\n        return buffer.slice(i * hopLength, i * hopLength + frameLength);\n    });\n}\nfunction rms(_a) {\n    var signal = _a.signal;\n    // Keeping this bad runtime typecheck for consistency\n    if (typeof signal !== \"object\") {\n        throw new TypeError();\n    }\n    var rms = 0;\n    for(var i = 0; i < signal.length; i++){\n        rms += Math.pow(signal[i], 2);\n    }\n    rms = rms / signal.length;\n    rms = Math.sqrt(rms);\n    return rms;\n}\nfunction energy(_a) {\n    var signal = _a.signal;\n    if (typeof signal !== \"object\") {\n        throw new TypeError();\n    }\n    var energy = 0;\n    for(var i = 0; i < signal.length; i++){\n        energy += Math.pow(Math.abs(signal[i]), 2);\n    }\n    return energy;\n}\nfunction spectralSlope(_a) {\n    var ampSpectrum = _a.ampSpectrum, sampleRate = _a.sampleRate, bufferSize = _a.bufferSize;\n    if (typeof ampSpectrum !== \"object\") {\n        throw new TypeError();\n    }\n    //linear regression\n    var ampSum = 0;\n    var freqSum = 0;\n    var freqs = new Float32Array(ampSpectrum.length);\n    var powFreqSum = 0;\n    var ampFreqSum = 0;\n    for(var i = 0; i < ampSpectrum.length; i++){\n        ampSum += ampSpectrum[i];\n        var curFreq = i * sampleRate / bufferSize;\n        freqs[i] = curFreq;\n        powFreqSum += curFreq * curFreq;\n        freqSum += curFreq;\n        ampFreqSum += curFreq * ampSpectrum[i];\n    }\n    return (ampSpectrum.length * ampFreqSum - freqSum * ampSum) / (ampSum * (powFreqSum - Math.pow(freqSum, 2)));\n}\nfunction mu(i, amplitudeSpect) {\n    var numerator = 0;\n    var denominator = 0;\n    for(var k = 0; k < amplitudeSpect.length; k++){\n        numerator += Math.pow(k, i) * Math.abs(amplitudeSpect[k]);\n        denominator += amplitudeSpect[k];\n    }\n    return numerator / denominator;\n}\nfunction spectralCentroid(_a) {\n    var ampSpectrum = _a.ampSpectrum;\n    if (typeof ampSpectrum !== \"object\") {\n        throw new TypeError();\n    }\n    return mu(1, ampSpectrum);\n}\nfunction spectralRolloff(_a) {\n    var ampSpectrum = _a.ampSpectrum, sampleRate = _a.sampleRate;\n    if (typeof ampSpectrum !== \"object\") {\n        throw new TypeError();\n    }\n    var ampspec = ampSpectrum;\n    //calculate nyquist bin\n    var nyqBin = sampleRate / (2 * (ampspec.length - 1));\n    var ec = 0;\n    for(var i = 0; i < ampspec.length; i++){\n        ec += ampspec[i];\n    }\n    var threshold = 0.99 * ec;\n    var n = ampspec.length - 1;\n    while(ec > threshold && n >= 0){\n        ec -= ampspec[n];\n        --n;\n    }\n    return (n + 1) * nyqBin;\n}\nfunction spectralFlatness(_a) {\n    var ampSpectrum = _a.ampSpectrum;\n    if (typeof ampSpectrum !== \"object\") {\n        throw new TypeError();\n    }\n    var numerator = 0;\n    var denominator = 0;\n    for(var i = 0; i < ampSpectrum.length; i++){\n        numerator += Math.log(ampSpectrum[i]);\n        denominator += ampSpectrum[i];\n    }\n    return Math.exp(numerator / ampSpectrum.length) * ampSpectrum.length / denominator;\n}\nfunction spectralSpread(_a) {\n    var ampSpectrum = _a.ampSpectrum;\n    if (typeof ampSpectrum !== \"object\") {\n        throw new TypeError();\n    }\n    return Math.sqrt(mu(2, ampSpectrum) - Math.pow(mu(1, ampSpectrum), 2));\n}\nfunction spectralSkewness(_a) {\n    var ampSpectrum = _a.ampSpectrum;\n    if (typeof ampSpectrum !== \"object\") {\n        throw new TypeError();\n    }\n    var mu1 = mu(1, ampSpectrum);\n    var mu2 = mu(2, ampSpectrum);\n    var mu3 = mu(3, ampSpectrum);\n    var numerator = 2 * Math.pow(mu1, 3) - 3 * mu1 * mu2 + mu3;\n    var denominator = Math.pow(Math.sqrt(mu2 - Math.pow(mu1, 2)), 3);\n    return numerator / denominator;\n}\nfunction spectralKurtosis(_a) {\n    var ampSpectrum = _a.ampSpectrum;\n    if (typeof ampSpectrum !== \"object\") {\n        throw new TypeError();\n    }\n    var ampspec = ampSpectrum;\n    var mu1 = mu(1, ampspec);\n    var mu2 = mu(2, ampspec);\n    var mu3 = mu(3, ampspec);\n    var mu4 = mu(4, ampspec);\n    var numerator = -3 * Math.pow(mu1, 4) + 6 * mu1 * mu2 - 4 * mu1 * mu3 + mu4;\n    var denominator = Math.pow(Math.sqrt(mu2 - Math.pow(mu1, 2)), 4);\n    return numerator / denominator;\n}\nfunction zcr(_a) {\n    var signal = _a.signal;\n    if (typeof signal !== \"object\") {\n        throw new TypeError();\n    }\n    var zcr = 0;\n    for(var i = 1; i < signal.length; i++){\n        if (signal[i - 1] >= 0 && signal[i] < 0 || signal[i - 1] < 0 && signal[i] >= 0) {\n            zcr++;\n        }\n    }\n    return zcr;\n}\nfunction loudness(_a) {\n    var ampSpectrum = _a.ampSpectrum, barkScale = _a.barkScale, _b = _a.numberOfBarkBands, numberOfBarkBands = _b === void 0 ? 24 : _b;\n    if (typeof ampSpectrum !== \"object\" || typeof barkScale !== \"object\") {\n        throw new TypeError();\n    }\n    var NUM_BARK_BANDS = numberOfBarkBands;\n    var specific = new Float32Array(NUM_BARK_BANDS);\n    var total = 0;\n    var normalisedSpectrum = ampSpectrum;\n    var bbLimits = new Int32Array(NUM_BARK_BANDS + 1);\n    bbLimits[0] = 0;\n    var currentBandEnd = barkScale[normalisedSpectrum.length - 1] / NUM_BARK_BANDS;\n    var currentBand = 1;\n    for(var i = 0; i < normalisedSpectrum.length; i++){\n        while(barkScale[i] > currentBandEnd){\n            bbLimits[currentBand++] = i;\n            currentBandEnd = currentBand * barkScale[normalisedSpectrum.length - 1] / NUM_BARK_BANDS;\n        }\n    }\n    bbLimits[NUM_BARK_BANDS] = normalisedSpectrum.length - 1;\n    //process\n    for(var i = 0; i < NUM_BARK_BANDS; i++){\n        var sum = 0;\n        for(var j = bbLimits[i]; j < bbLimits[i + 1]; j++){\n            sum += normalisedSpectrum[j];\n        }\n        specific[i] = Math.pow(sum, 0.23);\n    }\n    //get total loudness\n    for(var i = 0; i < specific.length; i++){\n        total += specific[i];\n    }\n    return {\n        specific: specific,\n        total: total\n    };\n}\nfunction perceptualSpread(_a) {\n    var ampSpectrum = _a.ampSpectrum, barkScale = _a.barkScale;\n    var loudnessValue = loudness({\n        ampSpectrum: ampSpectrum,\n        barkScale: barkScale\n    });\n    var max = 0;\n    for(var i = 0; i < loudnessValue.specific.length; i++){\n        if (loudnessValue.specific[i] > max) {\n            max = loudnessValue.specific[i];\n        }\n    }\n    var spread = Math.pow((loudnessValue.total - max) / loudnessValue.total, 2);\n    return spread;\n}\nfunction perceptualSharpness(_a) {\n    var ampSpectrum = _a.ampSpectrum, barkScale = _a.barkScale;\n    var loudnessValue = loudness({\n        ampSpectrum: ampSpectrum,\n        barkScale: barkScale\n    });\n    var spec = loudnessValue.specific;\n    var output = 0;\n    for(var i = 0; i < spec.length; i++){\n        if (i < 15) {\n            output += (i + 1) * spec[i + 1];\n        } else {\n            output += 0.066 * Math.exp(0.171 * (i + 1));\n        }\n    }\n    output *= 0.11 / loudnessValue.total;\n    return output;\n}\nfunction extractPowerSpectrum(_a) {\n    var ampSpectrum = _a.ampSpectrum;\n    if (typeof ampSpectrum !== \"object\") {\n        throw new TypeError();\n    }\n    var powerSpectrum = new Float32Array(ampSpectrum.length);\n    for(var i = 0; i < powerSpectrum.length; i++){\n        powerSpectrum[i] = Math.pow(ampSpectrum[i], 2);\n    }\n    return powerSpectrum;\n}\nfunction extractMelBands(_a) {\n    var ampSpectrum = _a.ampSpectrum, melFilterBank = _a.melFilterBank, bufferSize = _a.bufferSize;\n    if (typeof ampSpectrum !== \"object\") {\n        throw new TypeError(\"Valid ampSpectrum is required to generate melBands\");\n    }\n    if (typeof melFilterBank !== \"object\") {\n        throw new TypeError(\"Valid melFilterBank is required to generate melBands\");\n    }\n    var powSpec = extractPowerSpectrum({\n        ampSpectrum: ampSpectrum\n    });\n    var numFilters = melFilterBank.length;\n    var filtered = Array(numFilters);\n    var loggedMelBands = new Float32Array(numFilters);\n    for(var i = 0; i < loggedMelBands.length; i++){\n        filtered[i] = new Float32Array(bufferSize / 2);\n        loggedMelBands[i] = 0;\n        for(var j = 0; j < bufferSize / 2; j++){\n            //point-wise multiplication between power spectrum and filterbanks.\n            filtered[i][j] = melFilterBank[i][j] * powSpec[j];\n            //summing up all of the coefficients into one array\n            loggedMelBands[i] += filtered[i][j];\n        }\n        //log each coefficient.\n        loggedMelBands[i] = Math.log(loggedMelBands[i] + 1);\n    }\n    return Array.prototype.slice.call(loggedMelBands);\n}\nfunction getDefaultExportFromCjs(x1) {\n    return x1 && x1.__esModule && Object.prototype.hasOwnProperty.call(x1, \"default\") ? x1[\"default\"] : x1;\n}\n/*===========================================================================*\\\n * Discrete Cosine Transform\n *\n * (c) Vail Systems. Joshua Jung and Ben Bryan. 2015\n *\n * This code is not designed to be highly optimized but as an educational\n * tool to understand the Mel-scale and its related coefficients used in\n * human speech analysis.\n\\*===========================================================================*/ var cosMap = null;\n// Builds a cosine map for the given input size. This allows multiple input sizes to be memoized automagically\n// if you want to run the DCT over and over.\nvar memoizeCosines = function(N) {\n    cosMap = cosMap || {};\n    cosMap[N] = new Array(N * N);\n    var PI_N = Math.PI / N;\n    for(var k = 0; k < N; k++){\n        for(var n = 0; n < N; n++){\n            cosMap[N][n + k * N] = Math.cos(PI_N * (n + 0.5) * k);\n        }\n    }\n};\nfunction dct$2(signal, scale) {\n    var L = signal.length;\n    scale = scale || 2;\n    if (!cosMap || !cosMap[L]) memoizeCosines(L);\n    var coefficients = signal.map(function() {\n        return 0;\n    });\n    return coefficients.map(function(__, ix) {\n        return scale * signal.reduce(function(prev, cur, ix_, arr) {\n            return prev + cur * cosMap[L][ix_ + ix * L];\n        }, 0);\n    });\n}\nvar dct_1 = dct$2;\nvar dct = dct_1;\nvar dct$1 = /*@__PURE__*/ getDefaultExportFromCjs(dct);\nfunction mfcc(_a) {\n    // Tutorial from:\n    // http://practicalcryptography.com/miscellaneous/machine-learning\n    // /guide-mel-frequency-cepstral-coefficients-mfccs/\n    // @ts-ignore\n    var ampSpectrum = _a.ampSpectrum, melFilterBank = _a.melFilterBank, numberOfMFCCCoefficients = _a.numberOfMFCCCoefficients, bufferSize = _a.bufferSize;\n    var _numberOfMFCCCoefficients = Math.min(40, Math.max(1, numberOfMFCCCoefficients || 13));\n    var numFilters = melFilterBank.length;\n    if (numFilters < _numberOfMFCCCoefficients) {\n        throw new Error(\"Insufficient filter bank for requested number of coefficients\");\n    }\n    var loggedMelBandsArray = extractMelBands({\n        ampSpectrum: ampSpectrum,\n        melFilterBank: melFilterBank,\n        bufferSize: bufferSize\n    });\n    var mfccs = dct$1(loggedMelBandsArray).slice(0, _numberOfMFCCCoefficients);\n    return mfccs;\n}\nfunction chroma(_a) {\n    var ampSpectrum = _a.ampSpectrum, chromaFilterBank = _a.chromaFilterBank;\n    if (typeof ampSpectrum !== \"object\") {\n        throw new TypeError(\"Valid ampSpectrum is required to generate chroma\");\n    }\n    if (typeof chromaFilterBank !== \"object\") {\n        throw new TypeError(\"Valid chromaFilterBank is required to generate chroma\");\n    }\n    var chromagram = chromaFilterBank.map(function(row, i) {\n        return ampSpectrum.reduce(function(acc, v, j) {\n            return acc + v * row[j];\n        }, 0);\n    });\n    var maxVal = Math.max.apply(Math, chromagram);\n    return maxVal ? chromagram.map(function(v) {\n        return v / maxVal;\n    }) : chromagram;\n}\n// This file isn't being typechecked at all because there are major issues with it.\n// See #852 for details. Once that's merged, this file should be typechecked.\n// @ts-nocheck\nfunction spectralFlux(_a) {\n    var signal = _a.signal, previousSignal = _a.previousSignal, bufferSize = _a.bufferSize;\n    if (typeof signal !== \"object\" || typeof previousSignal != \"object\") {\n        throw new TypeError();\n    }\n    var sf = 0;\n    for(var i = -(bufferSize / 2); i < signal.length / 2 - 1; i++){\n        x = Math.abs(signal[i]) - Math.abs(previousSignal[i]);\n        sf += (x + Math.abs(x)) / 2;\n    }\n    return sf;\n}\nfunction spectralCrest(_a) {\n    var ampSpectrum = _a.ampSpectrum;\n    if (typeof ampSpectrum !== \"object\") {\n        throw new TypeError();\n    }\n    var rms = 0;\n    var peak = -Infinity;\n    ampSpectrum.forEach(function(x1) {\n        rms += Math.pow(x1, 2);\n        peak = x1 > peak ? x1 : peak;\n    });\n    rms = rms / ampSpectrum.length;\n    rms = Math.sqrt(rms);\n    return peak / rms;\n}\nvar buffer = function(args) {\n    return args.signal;\n};\nvar complexSpectrum = function(args) {\n    return args.complexSpectrum;\n};\nvar amplitudeSpectrum = function(args) {\n    return args.ampSpectrum;\n};\nvar extractors = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    amplitudeSpectrum: amplitudeSpectrum,\n    buffer: buffer,\n    chroma: chroma,\n    complexSpectrum: complexSpectrum,\n    energy: energy,\n    loudness: loudness,\n    melBands: extractMelBands,\n    mfcc: mfcc,\n    perceptualSharpness: perceptualSharpness,\n    perceptualSpread: perceptualSpread,\n    powerSpectrum: extractPowerSpectrum,\n    rms: rms,\n    spectralCentroid: spectralCentroid,\n    spectralCrest: spectralCrest,\n    spectralFlatness: spectralFlatness,\n    spectralFlux: spectralFlux,\n    spectralKurtosis: spectralKurtosis,\n    spectralRolloff: spectralRolloff,\n    spectralSkewness: spectralSkewness,\n    spectralSlope: spectralSlope,\n    spectralSpread: spectralSpread,\n    zcr: zcr\n});\n// memoization of the reversal of different lengths.\nfunction _toConsumableArray(arr) {\n    if (Array.isArray(arr)) {\n        for(var i = 0, arr2 = Array(arr.length); i < arr.length; i++){\n            arr2[i] = arr[i];\n        }\n        return arr2;\n    } else {\n        return Array.from(arr);\n    }\n}\nvar memoizedReversal = {};\nvar memoizedZeroBuffers = {};\nvar constructComplexArray = function constructComplexArray(signal) {\n    var complexSignal = {};\n    complexSignal.real = signal.real === undefined ? signal.slice() : signal.real.slice();\n    var bufferSize = complexSignal.real.length;\n    if (memoizedZeroBuffers[bufferSize] === undefined) {\n        memoizedZeroBuffers[bufferSize] = Array.apply(null, Array(bufferSize)).map(Number.prototype.valueOf, 0);\n    }\n    complexSignal.imag = memoizedZeroBuffers[bufferSize].slice();\n    return complexSignal;\n};\nvar bitReverseArray = function bitReverseArray(N) {\n    if (memoizedReversal[N] === undefined) {\n        var maxBinaryLength = (N - 1).toString(2).length; //get the binary length of the largest index.\n        var templateBinary = \"0\".repeat(maxBinaryLength); //create a template binary of that length.\n        var reversed = {};\n        for(var n = 0; n < N; n++){\n            var currBinary = n.toString(2); //get binary value of current index.\n            //prepend zeros from template to current binary. This makes binary values of all indices have the same length.\n            currBinary = templateBinary.substr(currBinary.length) + currBinary;\n            currBinary = [].concat(_toConsumableArray(currBinary)).reverse().join(\"\"); //reverse\n            reversed[n] = parseInt(currBinary, 2); //convert to decimal\n        }\n        memoizedReversal[N] = reversed; //save\n    }\n    return memoizedReversal[N];\n};\n// complex multiplication\nvar multiply = function multiply(a, b) {\n    return {\n        \"real\": a.real * b.real - a.imag * b.imag,\n        \"imag\": a.real * b.imag + a.imag * b.real\n    };\n};\n// complex addition\nvar add = function add(a, b) {\n    return {\n        \"real\": a.real + b.real,\n        \"imag\": a.imag + b.imag\n    };\n};\n// complex subtraction\nvar subtract = function subtract(a, b) {\n    return {\n        \"real\": a.real - b.real,\n        \"imag\": a.imag - b.imag\n    };\n};\n// euler's identity e^x = cos(x) + sin(x)\nvar euler = function euler(kn, N) {\n    var x1 = -2 * Math.PI * kn / N;\n    return {\n        \"real\": Math.cos(x1),\n        \"imag\": Math.sin(x1)\n    };\n};\n// complex conjugate\nvar conj = function conj(a) {\n    a.imag *= -1;\n    return a;\n};\nvar utils$1 = {\n    bitReverseArray: bitReverseArray,\n    multiply: multiply,\n    add: add,\n    subtract: subtract,\n    euler: euler,\n    conj: conj,\n    constructComplexArray: constructComplexArray\n};\nvar utils = utils$1;\n// real to complex fft\nvar fft = function fft(signal) {\n    var complexSignal = {};\n    if (signal.real === undefined || signal.imag === undefined) {\n        complexSignal = utils.constructComplexArray(signal);\n    } else {\n        complexSignal.real = signal.real.slice();\n        complexSignal.imag = signal.imag.slice();\n    }\n    var N = complexSignal.real.length;\n    var logN = Math.log2(N);\n    if (Math.round(logN) != logN) throw new Error(\"Input size must be a power of 2.\");\n    if (complexSignal.real.length != complexSignal.imag.length) {\n        throw new Error(\"Real and imaginary components must have the same length.\");\n    }\n    var bitReversedIndices = utils.bitReverseArray(N);\n    // sort array\n    var ordered = {\n        \"real\": [],\n        \"imag\": []\n    };\n    for(var i = 0; i < N; i++){\n        ordered.real[bitReversedIndices[i]] = complexSignal.real[i];\n        ordered.imag[bitReversedIndices[i]] = complexSignal.imag[i];\n    }\n    for(var _i = 0; _i < N; _i++){\n        complexSignal.real[_i] = ordered.real[_i];\n        complexSignal.imag[_i] = ordered.imag[_i];\n    }\n    // iterate over the number of stages\n    for(var n = 1; n <= logN; n++){\n        var currN = Math.pow(2, n);\n        // find twiddle factors\n        for(var k = 0; k < currN / 2; k++){\n            var twiddle = utils.euler(k, currN);\n            // on each block of FT, implement the butterfly diagram\n            for(var m = 0; m < N / currN; m++){\n                var currEvenIndex = currN * m + k;\n                var currOddIndex = currN * m + k + currN / 2;\n                var currEvenIndexSample = {\n                    \"real\": complexSignal.real[currEvenIndex],\n                    \"imag\": complexSignal.imag[currEvenIndex]\n                };\n                var currOddIndexSample = {\n                    \"real\": complexSignal.real[currOddIndex],\n                    \"imag\": complexSignal.imag[currOddIndex]\n                };\n                var odd = utils.multiply(twiddle, currOddIndexSample);\n                var subtractionResult = utils.subtract(currEvenIndexSample, odd);\n                complexSignal.real[currOddIndex] = subtractionResult.real;\n                complexSignal.imag[currOddIndex] = subtractionResult.imag;\n                var additionResult = utils.add(odd, currEvenIndexSample);\n                complexSignal.real[currEvenIndex] = additionResult.real;\n                complexSignal.imag[currEvenIndex] = additionResult.imag;\n            }\n        }\n    }\n    return complexSignal;\n};\n// complex to real ifft\nvar ifft = function ifft(signal) {\n    if (signal.real === undefined || signal.imag === undefined) {\n        throw new Error(\"IFFT only accepts a complex input.\");\n    }\n    var N = signal.real.length;\n    var complexSignal = {\n        \"real\": [],\n        \"imag\": []\n    };\n    //take complex conjugate in order to be able to use the regular FFT for IFFT\n    for(var i = 0; i < N; i++){\n        var currentSample = {\n            \"real\": signal.real[i],\n            \"imag\": signal.imag[i]\n        };\n        var conjugateSample = utils.conj(currentSample);\n        complexSignal.real[i] = conjugateSample.real;\n        complexSignal.imag[i] = conjugateSample.imag;\n    }\n    //compute\n    var X = fft(complexSignal);\n    //normalize\n    complexSignal.real = X.real.map(function(val) {\n        return val / N;\n    });\n    complexSignal.imag = X.imag.map(function(val) {\n        return val / N;\n    });\n    return complexSignal;\n};\nvar fft_1 = {\n    fft: fft,\n    ifft: ifft\n};\n/**\n * Meyda's interface to the Web Audio API. MeydaAnalyzer abstracts an API on\n * top of the Web Audio API's ScriptProcessorNode, running the Meyda audio\n * feature extractors inside that context.\n *\n * MeydaAnalyzer's constructor should not be called directly - MeydaAnalyzer\n * objects should be generated using the {@link createMeydaAnalyzer}\n * factory function in the main Meyda class.\n *\n * Options are of type {@link MeydaAnalyzerOptions}.\n *\n * @example\n * ```javascript\n * const analyzer = Meyda.createMeydaAnalyzer({\n *   \"audioContext\": audioContext,\n *   \"source\": source,\n *   \"bufferSize\": 512,\n *   \"featureExtractors\": [\"rms\"],\n *   \"inputs\": 2,\n *   \"numberOfMFCCCoefficients\": 20\n *   \"callback\": features => {\n *     levelRangeElement.value = features.rms;\n *   }\n * });\n * ```\n */ var MeydaAnalyzer = /** @class */ function() {\n    /** @hidden */ function MeydaAnalyzer(options, _this) {\n        var _this_1 = this;\n        this._m = _this;\n        if (!options.audioContext) {\n            throw this._m.errors.noAC;\n        } else if (options.bufferSize && !isPowerOfTwo(options.bufferSize)) {\n            throw this._m._errors.notPow2;\n        } else if (!options.source) {\n            throw this._m._errors.noSource;\n        }\n        this._m.audioContext = options.audioContext;\n        // TODO: validate options\n        this._m.bufferSize = options.bufferSize || this._m.bufferSize || 256;\n        this._m.hopSize = options.hopSize || this._m.hopSize || this._m.bufferSize;\n        this._m.sampleRate = options.sampleRate || this._m.audioContext.sampleRate || 44100;\n        this._m.callback = options.callback;\n        this._m.windowingFunction = options.windowingFunction || \"hanning\";\n        this._m.featureExtractors = extractors;\n        this._m.EXTRACTION_STARTED = options.startImmediately || false;\n        this._m.channel = typeof options.channel === \"number\" ? options.channel : 0;\n        this._m.inputs = options.inputs || 1;\n        this._m.outputs = options.outputs || 1;\n        this._m.numberOfMFCCCoefficients = options.numberOfMFCCCoefficients || this._m.numberOfMFCCCoefficients || 13;\n        this._m.numberOfBarkBands = options.numberOfBarkBands || this._m.numberOfBarkBands || 24;\n        //create nodes\n        this._m.spn = this._m.audioContext.createScriptProcessor(this._m.bufferSize, this._m.inputs, this._m.outputs);\n        this._m.spn.connect(this._m.audioContext.destination);\n        this._m._featuresToExtract = options.featureExtractors || [];\n        //always recalculate BS and MFB when a new Meyda analyzer is created.\n        this._m.barkScale = createBarkScale(this._m.bufferSize, this._m.sampleRate, this._m.bufferSize);\n        this._m.melFilterBank = createMelFilterBank(Math.max(this._m.melBands, this._m.numberOfMFCCCoefficients), this._m.sampleRate, this._m.bufferSize);\n        this._m.inputData = null;\n        this._m.previousInputData = null;\n        this._m.frame = null;\n        this._m.previousFrame = null;\n        this.setSource(options.source);\n        this._m.spn.onaudioprocess = function(e) {\n            var buffer;\n            if (_this_1._m.inputData !== null) {\n                _this_1._m.previousInputData = _this_1._m.inputData;\n            }\n            _this_1._m.inputData = e.inputBuffer.getChannelData(_this_1._m.channel);\n            if (!_this_1._m.previousInputData) {\n                buffer = _this_1._m.inputData;\n            } else {\n                buffer = new Float32Array(_this_1._m.previousInputData.length + _this_1._m.inputData.length - _this_1._m.hopSize);\n                buffer.set(_this_1._m.previousInputData.slice(_this_1._m.hopSize));\n                buffer.set(_this_1._m.inputData, _this_1._m.previousInputData.length - _this_1._m.hopSize);\n            }\n            var frames = frame(buffer, _this_1._m.bufferSize, _this_1._m.hopSize);\n            frames.forEach(function(f) {\n                _this_1._m.frame = f;\n                var features = _this_1._m.extract(_this_1._m._featuresToExtract, _this_1._m.frame, _this_1._m.previousFrame);\n                // call callback if applicable\n                if (typeof _this_1._m.callback === \"function\" && _this_1._m.EXTRACTION_STARTED) {\n                    _this_1._m.callback(features);\n                }\n                _this_1._m.previousFrame = _this_1._m.frame;\n            });\n        };\n    }\n    /**\n     * Start feature extraction\n     * The audio features will be passed to the callback function that was defined\n     * in the MeydaOptions that were passed to the factory when constructing the\n     * MeydaAnalyzer.\n     * @param {(string|Array.<string>)} [features]\n     * Change the features that Meyda is extracting. Defaults to the features that\n     * were set upon construction in the options parameter.\n     * @example\n     * ```javascript\n     * analyzer.start('chroma');\n     * ```\n     */ MeydaAnalyzer.prototype.start = function(features) {\n        this._m._featuresToExtract = features || this._m._featuresToExtract;\n        this._m.EXTRACTION_STARTED = true;\n    };\n    /**\n     * Stop feature extraction.\n     * @example\n     * ```javascript\n     * analyzer.stop();\n     * ```\n     */ MeydaAnalyzer.prototype.stop = function() {\n        this._m.EXTRACTION_STARTED = false;\n    };\n    /**\n     * Set the Audio Node for Meyda to listen to.\n     * @param {AudioNode} source - The Audio Node for Meyda to listen to\n     * @example\n     * ```javascript\n     * analyzer.setSource(audioSourceNode);\n     * ```\n     */ MeydaAnalyzer.prototype.setSource = function(source) {\n        this._m.source && this._m.source.disconnect(this._m.spn);\n        this._m.source = source;\n        this._m.source.connect(this._m.spn);\n    };\n    /**\n     * Set the channel of the audio node for Meyda to listen to\n     * @param {number} channel - the index of the channel on the input audio node\n     * for Meyda to listen to.\n     * @example\n     * ```javascript\n     * analyzer.setChannel(0);\n     * ```\n     */ MeydaAnalyzer.prototype.setChannel = function(channel) {\n        if (channel <= this._m.inputs) {\n            this._m.channel = channel;\n        } else {\n            console.error(\"Channel \".concat(channel, \" does not exist. Make sure you've provided a value for 'inputs' that is greater than \").concat(channel, \" when instantiating the MeydaAnalyzer\"));\n        }\n    };\n    /**\n     * Get a set of features from the current frame.\n     * @param {(string|Array.<string>)} [features]\n     * Change the features that Meyda is extracting\n     * @example\n     * ```javascript\n     * analyzer.get('spectralFlatness');\n     * ```\n     */ MeydaAnalyzer.prototype.get = function(features) {\n        if (this._m.inputData) {\n            return this._m.extract(features || this._m._featuresToExtract, this._m.inputData, this._m.previousInputData);\n        } else {\n            return null;\n        }\n    };\n    return MeydaAnalyzer;\n}();\n/**\n * This file contains the default export for Meyda, you probably want to check\n * out {@link default}\n *\n * @module Meyda\n */ var Meyda = {\n    audioContext: null,\n    spn: null,\n    bufferSize: 512,\n    sampleRate: 44100,\n    melBands: 26,\n    chromaBands: 12,\n    callback: null,\n    windowingFunction: \"hanning\",\n    featureExtractors: extractors,\n    EXTRACTION_STARTED: false,\n    numberOfMFCCCoefficients: 13,\n    numberOfBarkBands: 24,\n    _featuresToExtract: [],\n    windowing: applyWindow,\n    /** @hidden */ _errors: {\n        notPow2: new Error(\"Meyda: Buffer size must be a power of 2, e.g. 64 or 512\"),\n        featureUndef: new Error(\"Meyda: No features defined.\"),\n        invalidFeatureFmt: new Error(\"Meyda: Invalid feature format\"),\n        invalidInput: new Error(\"Meyda: Invalid input.\"),\n        noAC: new Error(\"Meyda: No AudioContext specified.\"),\n        noSource: new Error(\"Meyda: No source node specified.\")\n    },\n    /**\n     * @summary\n     * Create a MeydaAnalyzer\n     *\n     * A factory function for creating a MeydaAnalyzer, the interface for using\n     * Meyda in the context of Web Audio.\n     *\n     * ```javascript\n     * const analyzer = Meyda.createMeydaAnalyzer({\n     *   \"audioContext\": audioContext,\n     *   \"source\": source,\n     *   \"bufferSize\": 512,\n     *   \"featureExtractors\": [\"rms\"],\n     *   \"inputs\": 2,\n     *   \"callback\": features => {\n     *     levelRangeElement.value = features.rms;\n     *   }\n     * });\n     * ```\n     */ createMeydaAnalyzer: createMeydaAnalyzer,\n    /**\n     * List available audio feature extractors. Return format provides the key to\n     * be used in selecting the extractor in the extract methods\n     */ listAvailableFeatureExtractors: listAvailableFeatureExtractors,\n    /**\n     * Extract an audio feature from a buffer\n     *\n     * Unless `meyda.windowingFunction` is set otherwise, `extract` will\n     * internally apply a hanning window to the buffer prior to conversion into\n     * the frequency domain.\n     *\n     * ```javascript\n     * meyda.bufferSize = 2048;\n     * const features = meyda.extract(['zcr', 'spectralCentroid'], signal);\n     * ```\n     */ extract: function(feature, signal, previousSignal) {\n        var _this = this;\n        if (!signal) throw this._errors.invalidInput;\n        else if (typeof signal != \"object\") throw this._errors.invalidInput;\n        else if (!feature) throw this._errors.featureUndef;\n        else if (!isPowerOfTwo(signal.length)) throw this._errors.notPow2;\n        if (typeof this.barkScale == \"undefined\" || this.barkScale.length != this.bufferSize) {\n            this.barkScale = createBarkScale(this.bufferSize, this.sampleRate, this.bufferSize);\n        }\n        // Recalculate mel bank if buffer length changed\n        if (typeof this.melFilterBank == \"undefined\" || this.barkScale.length != this.bufferSize || this.melFilterBank.length != this.melBands) {\n            this.melFilterBank = createMelFilterBank(Math.max(this.melBands, this.numberOfMFCCCoefficients), this.sampleRate, this.bufferSize);\n        }\n        // Recalculate chroma bank if buffer length changed\n        if (typeof this.chromaFilterBank == \"undefined\" || this.chromaFilterBank.length != this.chromaBands) {\n            this.chromaFilterBank = createChromaFilterBank(this.chromaBands, this.sampleRate, this.bufferSize);\n        }\n        if (\"buffer\" in signal && typeof signal.buffer == \"undefined\") {\n            //signal is a normal array, convert to F32A\n            this.signal = arrayToTyped(signal);\n        } else {\n            this.signal = signal;\n        }\n        var preparedSignal = prepareSignalWithSpectrum(signal, this.windowingFunction, this.bufferSize);\n        this.signal = preparedSignal.windowedSignal;\n        this.complexSpectrum = preparedSignal.complexSpectrum;\n        this.ampSpectrum = preparedSignal.ampSpectrum;\n        if (previousSignal) {\n            var preparedSignal_1 = prepareSignalWithSpectrum(previousSignal, this.windowingFunction, this.bufferSize);\n            this.previousSignal = preparedSignal_1.windowedSignal;\n            this.previousComplexSpectrum = preparedSignal_1.complexSpectrum;\n            this.previousAmpSpectrum = preparedSignal_1.ampSpectrum;\n        }\n        var extract = function(feature) {\n            return _this.featureExtractors[feature]({\n                ampSpectrum: _this.ampSpectrum,\n                chromaFilterBank: _this.chromaFilterBank,\n                complexSpectrum: _this.complexSpectrum,\n                signal: _this.signal,\n                bufferSize: _this.bufferSize,\n                sampleRate: _this.sampleRate,\n                barkScale: _this.barkScale,\n                melFilterBank: _this.melFilterBank,\n                previousSignal: _this.previousSignal,\n                previousAmpSpectrum: _this.previousAmpSpectrum,\n                previousComplexSpectrum: _this.previousComplexSpectrum,\n                numberOfMFCCCoefficients: _this.numberOfMFCCCoefficients,\n                numberOfBarkBands: _this.numberOfBarkBands\n            });\n        };\n        if (typeof feature === \"object\") {\n            return feature.reduce(function(acc, el) {\n                var _a;\n                return Object.assign({}, acc, (_a = {}, _a[el] = extract(el), _a));\n            }, {});\n        } else if (typeof feature === \"string\") {\n            return extract(feature);\n        } else {\n            throw this._errors.invalidFeatureFmt;\n        }\n    }\n};\nvar prepareSignalWithSpectrum = function(signal, windowingFunction, bufferSize) {\n    var preparedSignal = {};\n    if (typeof signal.buffer == \"undefined\") {\n        //signal is a normal array, convert to F32A\n        preparedSignal.signal = arrayToTyped(signal);\n    } else {\n        preparedSignal.signal = signal;\n    }\n    preparedSignal.windowedSignal = applyWindow(preparedSignal.signal, windowingFunction);\n    preparedSignal.complexSpectrum = fft_1.fft(preparedSignal.windowedSignal);\n    preparedSignal.ampSpectrum = new Float32Array(bufferSize / 2);\n    for(var i = 0; i < bufferSize / 2; i++){\n        preparedSignal.ampSpectrum[i] = Math.sqrt(Math.pow(preparedSignal.complexSpectrum.real[i], 2) + Math.pow(preparedSignal.complexSpectrum.imag[i], 2));\n    }\n    return preparedSignal;\n};\n/**\n * List available audio feature extractors. Return format provides the key to\n * be used in selecting the extractor in the extract methods\n */ function listAvailableFeatureExtractors() {\n    return Object.keys(this.featureExtractors);\n}\n/**\n * Create a MeydaAnalyzer\n *\n * A factory function for creating a MeydaAnalyzer, the interface for using\n * Meyda in the context of Web Audio.\n *\n * ```javascript\n * const analyzer = Meyda.createMeydaAnalyzer({\n *   \"audioContext\": audioContext,\n *   \"source\": source,\n *   \"bufferSize\": 512,\n *   \"featureExtractors\": [\"rms\"],\n *   \"inputs\": 2,\n *   \"callback\": features => {\n *     levelRangeElement.value = features.rms;\n *   }\n * });\n * ```\n */ function createMeydaAnalyzer(options) {\n    return new MeydaAnalyzer(options, Object.assign({}, Meyda));\n}\n// @ts-ignore\nif (false) {}\nmodule.exports = Meyda;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/meyda@5.6.3_rollup@4.44.1/node_modules/meyda/dist/node/main.js\n");

/***/ })

};
;