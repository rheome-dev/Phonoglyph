name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'
  POSTGRES_VERSION: '16'

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: midiviz_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install root dependencies
        run: npm ci

      - name: Install workspace dependencies
        run: |
          npm ci -w apps/web
          npm ci -w apps/api

      - name: Lint code
        run: |
          npm run lint -w apps/web
          npm run lint -w apps/api

      - name: Type check
        run: |
          npm run type-check -w apps/web
          npm run type-check -w apps/api

      - name: Setup test database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/midiviz_test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: midiviz_test
          DB_USER: postgres
          DB_PASSWORD: postgres
        run: |
          npm run db:migrate -w apps/api

      - name: Run tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/midiviz_test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: midiviz_test
          DB_USER: postgres
          DB_PASSWORD: postgres
        run: |
          npm run test -w apps/web
          npm run test -w apps/api

  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm ci -w apps/web
          npm ci -w apps/api

      - name: Build applications
        run: |
          npm run build -w apps/web
          npm run build -w apps/api

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            apps/web/.next/
            apps/api/dist/
          retention-days: 7

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Deploy to staging
        run: |
          echo "ðŸš€ Deploying to staging environment..."
          echo "This would deploy to your staging server"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Deploy to production
        run: |
          echo "ðŸŽ‰ Deploying to production environment..."
          echo "This would deploy to your production server" 